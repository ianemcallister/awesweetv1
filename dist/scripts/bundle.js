config.$inject=["$routeProvider","$locationProvider"],projByRetailChannelDirective.$inject=["firebaseService"];var awesweet=angular.module("awesweet",["ngRoute","ngSanitize","ui.bootstrap","firebase","chart.js"]);function CMERecapController(e,t,n,a,o,r,i){var s=this;s.accts=r,s.pullClass=function(t,n){var a="";return Object.keys(t).forEach(function(e){t[e].class==n&&(a=t[e].balance)}),a},s.processLineAccts=function(e){return i.lineData.fromAcctTxs(e)},t.info("in the checkout CMERecapController",n,r)}function adminDataChannelsController(e,o,r,t,n,a,i){var s=this;s.channels=a,s.channelData=a[r.channelId],s.instances=i,s.navPrevious=function(){var t=[],n=0,a=0,e=0;Object.keys(s.channels).forEach(function(e){t.push(s.channels[e]),e==r.channelId&&(a=n),n++}),0<a-1&&(e=a-1),o.path("/admin/data/channel/"+t[e].id)},s.navNext=function(){var t=[],n=0,a=0,e=0;Object.keys(s.channels).forEach(function(e){t.push(s.channels[e]),e==r.channelId&&(a=n),n++}),a+1<t.length&&(e=a+1),o.path("/admin/data/channel/"+t[e].id)}}function adminForecastController(e,t,n,a,o){var r=this;r.state={incomeRowDetails:{Retail:!1,Wholesale:!1,Online:!1,Other:!1}},r.year=n.year,r.week=n.week,r.start=function(e,t){var n=moment(new Date(2018,11,31)),a=0;a=2019<e?a+52*(e-2019)-1+parseInt(t):a-1+parseInt(t);return n.add(a,"w").format()}(r.year,r.week),r.end=moment(r.start).add(6,"d").format(),r.inflows={Retail:{projection:5},Wholesale:{},Online:{},Other:{}},r.outflows=[],r.changeWeek=function(e,t){var n=parseInt(e)+parseInt(t);n<53&&0<n?a.path("admin/forecasts/weekly/"+r.year+"/"+n):console.log("problem")}}function adminInvRptController(e,t){t.info("in the inventory reprts controller")}function cartPageController(a,o,r){var i=this;i.items=["item1","item2","item3"],i.animationsEnabled=!0,i.open=function(e,t){var n=t?angular.element(r[0].querySelector(".modal-demo "+t)):void 0;a.open({animation:i.animationsEnabled,ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",controllerAs:"vm",size:e,appendTo:n,resolve:{items:function(){return i.items}}}).result.then(function(e){i.selected=e},function(){o.info("Modal dismissed at: "+new Date)})},i.openComponentModal=function(){a.open({animation:i.animationsEnabled,component:"modalComponent",resolve:{items:function(){return i.items}}}).result.then(function(e){i.selected=e},function(){o.info("modal-component dismissed at: "+new Date)})},o.info("in the cart controller"),i.open("lg")}function ModalInstanceCtrl(e,t){var n=this;n.items=t,n.selected={item:n.items[0]},n.ok=function(){e.close(n.selected.item)},n.cancel=function(){e.dismiss("cancel")}}function channelsPageController(e,t){t.info("in the channels controller")}function checkoutPageController(e,t,n){t.info("in the checkout controller",n)}function dashboardPageController(e,t){t.info("in the dashboard controller")}function dataViewsController(n,a,o,r,i,t,e){var s=o.$$path.split("/")[3],c=this;switch(c.state={values:{newChannelName:"",newChannelType:""},addChannels:!1},c.seasonInput=!1,c.instancesInput=!1,c.aChannel={newSeason:{id:"",title:""},seasonStart:"",seasonsEnd:"",itFrequency:"",itOpens:{hr:"",min:"",AP:"",time:""},itCloses:{hr:"",min:"",AP:"",time:""},itStarts:{hr:"",min:"",AP:"",time:""},itEnds:{hr:"",min:"",AP:"",time:""},newInstancesPreview:[]},c.seasonsList=e,c.loadChannel=function(e){o.path("/admin/data/channel/"+e)},c.navPrevious=function(){var t=[],n=0,a=0,e=0;Object.keys(c.channels).forEach(function(e){t.push(c.channels[e]),e==r.channelId&&(a=n),n++}),0<a-1&&(e=a-1),o.path("/admin/data/channel/"+t[e].id)},c.navNext=function(){var t=[],n=0,a=0,e=0;Object.keys(c.channels).forEach(function(e){t.push(c.channels[e]),e==r.channelId&&(a=n),n++}),a+1<t.length&&(e=a+1),o.path("/admin/data/channel/"+t[e].id)},c.saveNewSeason=function(e){console.log("saving seasons: ",e),i.create.season(r.channelId,e).then(function(e){alert("Saved Successfully",e)}).catch(function(e){alert("Error Savings",e)})},c.previewIterations=function(e,t,n){var a=moment(e),o=moment(t);if(c.aChannel.newInstancesPreview=[],""!=n)switch(console.log("all values good"),n){case"Daily":for(var r=o.diff(a,"days"),i=a,s=0;s<=r;s++)c.aChannel.newInstancesPreview.push({instance:s+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:i.format()}),i=i.add(1,"days");break;case"Weekly":for(r=o.diff(a,"weeks"),i=a,s=0;s<=r;s++)c.aChannel.newInstancesPreview.push({instance:s+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:i.format()}),i=i.add(1,"week");break;case"Bi-Weekly":for(r=o.diff(a,"weeks")/2,i=a,s=0;s<=r;s++)c.aChannel.newInstancesPreview.push({instance:s+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:i.format()}),i=i.add(2,"week");break;case"Monthly":for(r=o.diff(a,"months"),i=a,s=0;s<=r;s++)c.aChannel.newInstancesPreview.push({instance:s+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:i.format()}),i=i.add(1,"month")}},c.setItTimes=function(e,t,n,a){if(""!=t&&""!=n&&""!=a){c.aChannel[e].time="PM"==a?parseInt(t)+12+":"+n+"-07:00":t+":"+n+"-07:00";for(var o=0;o<c.aChannel.newInstancesPreview.length;o++)c.aChannel.newInstancesPreview[o][e]=c.aChannel[e].time}console.log("this time",c.aChannel.itOpens.time)},c.saveSeasonId=function(t){console.log("got this value",t,"looking at this data",c.channelData.seasons),Object.keys(c.channelData.seasons).forEach(function(e){c.channelData.seasons[e].title==t?(console.log("found season id",c.channelData.seasons[e].seasonId),c.aChannel.newSeason.id=c.channelData.seasons[e].seasonId):console.log("no season ID found")})},c.delItPreview=function(e){console.log(e,c.aChannel.newInstancesPreview[e]),c.aChannel.newInstancesPreview.splice(e,1)},c.saveIterations=function(e){console.log("got this array",e),t({method:"POST",url:"/task/addIncidenceList",data:e}).then(function(e){console.log(e)}).catch(function(e){console.log(e)})},c.instanceReroute=function(e){console.log("got this id",e),o.path("/admin/data/instance/"+e)},c.addChannel=function(e,t){console.log("adding",e,t),i.create.channel(e,t).then(function(e){console.log(e),n.$apply()}).catch(function(e){a.error(e)})},s){case"instances_by_channel":i.read.instances().then(function(e){c.instances=e,n.$apply()}).catch(function(e){a.error(e)});break;case"channels":i.read.channels().then(function(e){c.channels=e,n.$apply()}).catch(function(e){a.error(e)});break;case"channel":i.read.channels().then(function(e){c.channels=e,c.channelData=e[r.channelId],n.$apply()}).catch(function(e){a.error(e)}),i.query.instance(r.channelId).then(function(e){c.instances=e,n.$apply()}).catch(function(e){a.error(e)})}a.info("in the data views controller",s)}function instanceDataViewsController(e,t,o,n,a){var r=this;r.state={txsVisible:!1,forecastVisible:!1,shiftsVisible:!1},r.instance=n,r.shifts=a,r.updateSummary=function(){var e={};e["instances/"+r.instance.instance_id+"/txsSummary"]=JSON.parse(angular.toJson(r.instance.txsSummary)),console.log("updating summary values",r.instance.txsSummary),o.update.record(e).then(function(e){console.log(e)}).catch(function(e){console.log(e)})},r.saveShifts=function(t){var n=[],a={};Object.keys(t).forEach(function(e){t[e].channel_id=r.instance.channel_id,t[e].instance_id=r.instance.instance_id,t[e].seasons=r.instance.season_name,t[e].seasons_id=r.instance.season_id,t[e].status.executed=!0,n.push(t[e])}),0<n.length&&n.forEach(function(e){var t=o.push.record("/shifts");a["/shifts/"+t]=JSON.parse(angular.toJson(e)),r.shifts[t]=e}),o.update.record(a).then(function(e){console.log(e,n)}).catch(function(e){console.log(e)}),e.$apply()}}function inventoryInstancePageController(e,t){t.info("in the inventory instance page controller")}function jobsPageController(e,t){t.info("in the jobs controller")}function landingPageController(e,t){t.info("in the landing controller")}function loginPageController(n,a,e,o,r){this.username="",this.password="",a.info("in the login controller"),this.submit=function(e,t){console.log("submitting form",e,t),r.authenticate.email(e,t).then(function(e){a.info(e),o.path("/team/"+e.user.uid+"/dashboard"),n.$apply()}).catch(function(e){a.error(e)})}}function pricingPageController(e,t){t.info("in the pricing controller")}function productPageController(e,t,n){t.info("in the products controller")}function reviewsPageController(e,t){t.info("in the reviews controller")}function storyPageController(e,t){t.info("in the story controller")}function supportPageController(e,t){t.info("in the support controller")}function teamChecklistsPageController(t,e,n,a){var o=this;o.listType=n.type,o.list={},a.GETaChecklist(n.listId).then(function(e){console.log("SUCCESS"),console.log(e),o.list=e,t.$apply()}).catch(function(e){console.log("ERROR"),console.log(e),o.list=e,t.$apply()}),e.info("in the team checklists controller",n)}function teamPageController(t,e,n,a){var o=this;o.activeChecklists=[],a.GETallChecklists().then(function(e){console.log("SUCCESS",e),o.activeChecklists=e,t.$apply()}).catch(function(e){console.log("ERROR",e),o.activeChecklists=e,t.$apply()}),o.listClicked=function(e){console.log("got this id",e),console.log("redirecting to",o.activeChecklists[e].url),n.path(o.activeChecklists[e].url)},e.info("in the team controller")}function teamDashPageController(t,n,a,o,e){var r=this;r.username=o.userId,e.read.inventoryInstances().then(function(e){r.instances=e,t.$apply()}).catch(function(e){n.error(e)}),r.loadInstance=function(e){a.path("/team/"+o.userId+"/CMERecap/"+e)},n.info("in the teamDashPageController")}function teamSalesSummaryPageController(e,t){t.info("in the teamSalesSummaryPageController")}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landing-page.htm",controller:"landingPageController",controllerAs:"vm"}).when("/products",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productName/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/pricing",{templateUrl:"views/pricing-page.htm",controller:"pricingPageController",controllerAs:"vm"}).when("/story",{templateUrl:"views/story-page.htm",controller:"storyPageController",controllerAs:"vm"}).when("/channels",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/channels/:channelId",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/support",{templateUrl:"views/support-page.htm",controller:"supportPageController",controllerAs:"vm"}).when("/reviews",{templateUrl:"views/reviews-page.htm",controller:"reviewsPageController",controllerAs:"vm"}).when("/jobs",{templateUrl:"views/jobs-page.htm",controller:"jobsPageController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cart-page.htm",controller:"cartPageController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId/:ticketId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/login",{templateUrl:"views/login-page.htm",controller:"loginPageController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"views/dashboard-page.htm",controller:"dashboardPageController",controllerAs:"vm"}).when("/admin",{}).when("/admin/data/instances_by_channel",{templateUrl:"views/data_instances_by_cannel.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/channels",{templateUrl:"views/data_channels.htm",controller:"dataViewsController",controllerAs:"vm",resolve:{seasonsData:function(){return 1}}}).when("/admin/data/channel/:channelId",{templateUrl:"views/admin-data-channels-page.htm",controller:"adminDataChannelsController",controllerAs:"vm",resolve:{seasonsData:["firebaseService","$route",function(e,t){return e.query.equalTo("seasons","channelId",t.current.params.channelId)}],channelsData:["firebaseService","$route",function(e,t){return e.read.channels()}],instanceData:["firebaseService","$route",function(e,t){e.query.instance(t.current.params.channelId)}]}}).when("/admin/data/instance/:instanceId",{templateUrl:"views/instance_data_view.htm",controller:"instanceDataViewsController",controllerAs:"vm",resolve:{instanceData:["firebaseService","$route",function(e,t){return e.read.anInstance(t.current.params.instanceId)}],shiftsData:["firebaseService","$route",function(e,t){return e.query.shifts(t.current.params.instanceId)}]}}).when("/admin/inventory/instance/:instanceId",{templateUrl:"views/inventory-instance-page.htm",controller:"inventoryInstancePageController",controllerAs:"vm"}).when("/admin/forecasts/weekly/:year/:week",{templateUrl:"views/admin-forecast-week-page.htm",controller:"adminForecastController",controllerAs:"vm"}).when("/admin/inventory/operations",{}).when("/admin/inventory/templates",{}).when("/admin/inventory/reports",{templateUrl:"views/admin-inv-rpt-page.htm",controller:"adminInvRptController",controllerAs:"vm"}).when("/team",{templateUrl:"views/team-page.htm",controller:"teamPageController",controllerAs:"vm"}).when("/team/:userId/dashboard",{templateUrl:"views/team-dash-page.htm",controller:"teamDashPageController",controllerAs:"vm"}).when("/team/:userId/CMERecap/:instanceId",{templateUrl:"views/cme-recap-page.htm",controller:"CMERecapController",controllerAs:"vm",resolve:{inventoryInstanceAcctsList:["firebaseService","$route",function(e,t){return e.resolve.instanceAccts(t.current.params.instanceId)}]}}).when("/team/checklists/:type/:listId",{templateUrl:"views/teamChecklists-page.htm",controller:"teamChecklistsPageController",controllerAs:"vm"}).when("/team/salesSummary",{templateUrl:"views/teamSalesSummary-page.htm",controller:"teamSalesSummaryPageController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function adminInstanceShiftsDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/admin-instance-shifts.directive.htm",replace:!0,scope:{instance:"=",shifts:"=",activeTxs:"=",saveShifts:"&",update:"&"},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(i,e,s,t){var c=this;function l(e){var t={};return e.forEach(function(e){t[e.id]=e}),t}function d(e){var t=0,n=0;return 8<e?n=e-(t=8):t=e,{reg:t,ot:n}}function n(e){var t=e.split("T")[0],n={start:t+"T00:00:00-07:00",end:t+"T23:59:59-07:00"};s.get.shifts(n).then(function(e){var t,n,a,o,r;c.activeShifts=(t=e.data,n=l(t.shifts),a=l(t.sites),o=l(t.users),r={},Object.keys(n).forEach(function(e){var t=s.templates.shiftData();t.wiwShift_id=n[e].id,t.shiftTeamMember=o[n[e].user_id].first_name+" "+o[n[e].user_id].last_name,t.wiw_teamMember_id=n[e].user_id,t.teamMemberRate=o[n[e].user_id].hourly_rate,t.channel=a[n[e].site_id].name,t.time.start=moment(n[e].start_time).format(),t.time.end=moment(n[e].end_time).format(),t.time.dHrs=(moment(n[e].end_time).diff(moment(n[e].start_time),"minutes")/60).toFixed(2),t.hrs.reg=d(t.time.dHrs).reg,t.hrs.ot=d(t.time.dHrs).ot,t.pay.reg_labor=t.hrs.reg*t.teamMemberRate,t.pay.ot_labor=t.hrs.ot*(1.5*t.teamMemberRate),r[e]=t,null==c.instance.txsSummary.filters.shifts[e]&&(c.instance.txsSummary.filters.shifts[e]=!1),null==c.instance.txsSummary.filters.comTips[e]&&(c.instance.txsSummary.filters.comTips[e]={},c.instance.txsSummary.filters.comTips[e].commisions=!1,c.instance.txsSummary.filters.comTips[e].tips=!1)}),console.log("activeShifts",r),r),i.$apply()}).catch(function(e){console.log(e)})}c.instance=i.vm.instance,c.activeShifts={},c.activeTxs=i.vm.activeTxs,c.comType="algr",c.sendShifts=function(){i.vm.saveShifts({data:{}})},c.selectShift=function(e,t,n){c.instance.txsSummary.filters.comTips[e].commisions=c.instance.txsSummary.filters.shifts[e],c.instance.txsSummary.filters.comTips[e].tips=c.instance.txsSummary.filters.shifts[e],c.blocks=function(t,n){var a=[];switch(Object.keys(t).forEach(function(e){t[e]&&(a.push({start:n[e].time.start,end:n[e].time.end,members:[],total_com:0,total_tips:0,total_sales:0}),a[a.length-1].members.push(e))}),a.length){case 0:console.log("0 blocks");break;case 1:var o=a[0].start,r=a[0].end,e=moment(r).diff(moment(o),"hours");console.log("1 block",a,c.activeTxs.length),c.activeTxs.forEach(function(e){var t=moment(e.created_at);t.isBetween(o,r)&&(a[0].total_tips+=e.tip_money.amount,a[0].total_sales+=e.gross_sales_money.amount-e.refunded_money.amount)}),a[0].total_com=function(e,t,n){var a=0;switch(e){case"algr":var o=t/100/n,r=o/2752,i=r*o;a=i*n,console.log("commission,",n,t,o,r,i)}return 100*a.toFixed(2)}(c.comType,a[0].total_sales,e);break;default:console.log("multiple blocks")}return a}(t,n),console.log("vm.shifts",c.shifts),c.blocks.forEach(function(e){e.members.forEach(function(t){c.activeShifts[t].commCalculatd=!0,c.activeShifts[t].pay.tips=e.total_tips/(1/e.members.length),c.activeShifts[t].pay.comm=e.total_com/(1/e.members.length),Object.keys(c.shifts).forEach(function(e){c.shifts[e].wiwShift_id==t&&(c.shifts[e]=c.activeShifts[t])})})})},t(function(){c.shifts=i.vm.shifts,null==c.shifts&&(c.shifts={}),null==c.instance.txsSummary.filters.shifts&&(c.instance.txsSummary.filters.shifts={}),null==c.instance.txsSummary.filters.comTips&&(c.instance.txsSummary.filters.comTips={}),n(i.vm.instance.opens)})}return n.$inject=["$scope","$log","wiwService","$timeout"],e}function adminInstanceTxsDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/admin-instance-txs.directive.htm",replace:!0,scope:{instance:"=",update:"&",activeTxs:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(i,e,o,t,s){var c=this;function l(e,t){var n=[];return console.log("filters",t),e.forEach(function(e){null!=t.employees[e.tender[0].employee_id]&&t.employees[e.tender[0].employee_id].active&&t.devices[e.device.id].active&&n.push(e)}),n}function d(e,t){var n=t,a={gross:0,returns:0,discounts:0,net:0,tips:0,total:0,totalCollected:0,cash:0,card:0,other:0,fees:0,payNet:0};if(t.skipped){var o=s.templates.instanceFilters();Object.keys(n.filters.employees).forEach(function(e){n.filters.employees[e].active=!1}),n.sales=o.sales,n.payments=o.payments}else{e.forEach(function(e){a.gross+=e.gross_sales_money.amount,a.returns+=e.refunded_money.amount,a.discounts+=e.discount_money.amount,a.net+=e.net_sales_money.amount,a.tips+=e.tip_money.amount,a.total+=e.total_collected_money.amount,a.fees+=e.processing_fee_money.amount,a.payNet+=e.net_total_money.amount,e.tender.forEach(function(e){a.totalCollected+=e.total_money.amount,"CREDIT_CARD"==e.type?a.card+=e.total_money.amount:"CASH"==e.type?a.cash+=e.total_money.amount:"OTHER"==e.type&&(a.other+=e.total_money.amount)})}),n.sales[0].reported=a.gross,n.sales[1].reported=a.returns,n.sales[2].reported=a.discounts,n.sales[3].reported=a.net,n.sales[4].reported=a.tips,n.sales[5].reported=a.total;for(var r=0;r<Object.keys(n.sales).length;r++)n.sales[r].actual=m("sales",r);n.payments[0].reported=a.totalCollected,n.payments[1].reported=a.cash,n.payments[2].reported=a.card,n.payments[3].reported=a.other,n.payments[4].reported=a.fees,n.payments[5].reported=a.payNet;for(r=0;r<Object.keys(n.payments).length;r++)n.payments[r].actual=m("payments",r)}return n}function m(e,t){return c.txsSummary[e][t].reported+100*c.txsSummary[e][t].adjustment}c.txsSummary=s.templates.instanceFilters(),c.activeTxs=i.vm.activeTxs,t(function(){var e,t,n,a;console.log(i.vm),c.formattedDateTime=(e=i.vm.instance,{date:new Date(e.start_time),start:{h:e.start_time.split("T")[1].split("-")[0].split(":")[0],m:e.start_time.split("T")[1].split("-")[0].split(":")[1]},end:{h:e.end_time.split("T")[1].split("-")[0].split(":")[0],m:e.end_time.split("T")[1].split("-")[0].split(":")[1]}}),t=i.vm.instance.start_time,n=i.vm.instance.end_time,a=[o.list.transactions(t,n),o.list.employees()],Promise.all(a).then(function(e){var n,a,t,o=e[0].data,r=e[1];c.activeEmployees=(n=r,a={},o.forEach(function(e){var t="";e.tender.forEach(function(e){null!=(t=e.employee_id)&&null==a[t]&&(a[t]={active:!0,first_name:n[t].first_name,last_name:n[t].last_name,devices:{}})}),null!=t&&(a[t].devices[e.device.name]=!0)}),a),c.activeDevices=(t={},o.forEach(function(e){null==e.device.name?t[e.device.id]={name:"(Undefined)",active:!1}:t[e.device.id]={name:e.device.name,active:!0}}),Object.keys(t).forEach(function(e){t[e].included=!0}),t),c.allTxs=o,null!=c.instance.txsSummary?(console.log("found saved filters"),c.txsSummary=c.instance.txsSummary,c.activeEmployees=c.instance.txsSummary.filters.employees,c.activeDevices=c.instance.txsSummary.filters.devices):(console.log("no saved filters"),c.txsSummary.filters.employees=c.activeEmployees,c.txsSummary.filters.devices=c.activeDevices),c.activeTxs=l(o,c.txsSummary.filters),c.txsSummary=d(c.activeTxs,c.txsSummary),i.$apply()}).catch(function(e){console.log(e)})}),c.activeToday=function(e){return console.log(e),"mmIrwp5oGAYi_58pRFAh"==e},c.typeDisplay=function(e){var t="";return e.forEach(function(e){t+=e.name+" "}),t},c.orderDisply=function(e){var n=[];return e.forEach(function(e){var t="("+e.quantity+"x) "+e.name+" - "+e.item_variation_name;n.push(t)}),n},c.reFilter=function(){c.activeTxs=l(c.allTxs,c.txsSummary.filters),c.txsSummary=d(c.activeTxs,c.txsSummary)},c.saveSummary=function(){console.log("saving summary",c.txsSummary),i.vm.instance.txsSummary=c.txsSummary,i.vm.update()},c.adjustmentUpdate=function(e,t){var n=e+t;switch(console.log("updating adjustment",e,t),c.txsSummary[e][t].actual=m(e,t),n){case"sales0":c.txsSummary[e][3].adjustment=c.txsSummary[e][t].adjustment,c.txsSummary[e][3].actual=m(e,3),c.txsSummary[e][5].adjustment=c.txsSummary[e][t].adjustment,c.txsSummary[e][5].actual=m(e,5);break;default:c.txsSummary[e][0].adjustment+=parseFloat(c.txsSummary[e][t].adjustment),c.txsSummary[e][0].actual=m(e,0),c.txsSummary[e][5].adjustment+=parseFloat(c.txsSummary[e][t].adjustment),c.txsSummary[e][5].actual=m(e,5)}},c.markSkipped=function(){c.txsSummary.skipped?console.log("marking as skipped"):console.log("not skipped"),c.reFilter()}}return n.$inject=["$scope","$log","squareService","$timeout","firebaseService"],e}function adminInstanceReportsDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/admin-instance-reports.directive.htm",replace:!0,scope:{instance:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(t,e,n){var a=this;a.retailPerformance=[{acct:"INCOME",subacct:"",proj:"",act:"",diff:"",change:"",perc:"",isSub:!1},{acct:"INCOME",subacct:"Sales",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"INCOME",subacct:"Tips",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"INCOME",subacct:"Other",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"",proj:"",act:"",diff:"",change:"",perc:"",isSub:!1},{acct:"EXPENSE",subacct:"Cost Of Goods",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Payroll",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Rent",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Power",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Returns",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Comps",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Fees",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"EXPENSE",subacct:"Other",proj:"",act:"",diff:"",change:"",perc:"",isSub:!0},{acct:"NET",subacct:"",proj:"",act:"",diff:"",change:"",perc:"",isSub:!1}],a.mfgReport=[{acct:"CONSUMED",subacct:""},{acct:"CREATED",subacct:""},{acct:"REMAING",subacct:""}],n(function(){var e=t.vm.instance.txsSummary;null!=e&&(a.retailPerformance[1].act=e.sales[0].actual,a.retailPerformance[2].act=e.sales[4].actual,a.retailPerformance[11].act=e.payments[4].actual,a.retailPerformance[0].act=a.retailPerformance[1].act+a.retailPerformance[2].act+a.retailPerformance[3].act,a.retailPerformance[4].act=a.retailPerformance[5].act+a.retailPerformance[6].act+a.retailPerformance[7].act+a.retailPerformance[8].act+a.retailPerformance[9].act+a.retailPerformance[10].act+a.retailPerformance[11].act+a.retailPerformance[12].act,a.retailPerformance[13].act=parseFloat(a.retailPerformance[0].act)+parseFloat(a.retailPerformance[4].act),a.retailPerformance[1].perc=(a.retailPerformance[1].act/a.retailPerformance[0].act).toFixed(4),a.retailPerformance[2].perc=(a.retailPerformance[2].act/a.retailPerformance[0].act).toFixed(4),a.retailPerformance[11].perc=(a.retailPerformance[11].act/a.retailPerformance[4].act).toFixed(4),a.retailPerformance[10].perc=(a.retailPerformance[10].act/a.retailPerformance[4].act).toFixed(4),a.retailPerformance[13].perc=(a.retailPerformance[13].act/a.retailPerformance[0].act).toFixed(4))})}return n.$inject=["$scope","$log","$timeout"],e}function barChartDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/bar-chart.directive.htm",replace:!0,scope:{data:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t,n){var a=this;a.flavors=[],a.balance=[],console.log(a.data)}return n.$inject=["$scope","$log","$firebaseObject"],e}function footerDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/footer-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){t.info("in footer directive controller")}return n.$inject=["$scope","$log"],e}function landingChannelsBannerDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingChannelsBanner-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){t.info("in landing channels banner directive controller")}return n.$inject=["$scope","$log"],e}function landingHeroBannerDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingHeroBanner-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){t.info("in landing hero banner directive controller")}return n.$inject=["$scope","$log"],e}function landingReviewsSliderDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingReviewsSlider-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){t.info("in landing reviews slider directive controller")}return n.$inject=["$scope","$log"],e}function lineChartDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/line-chart.directive.htm",replace:!0,scope:{data:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){e.labels=data.flavors,e.data=data.levels,t.info("in lineChartDirective controller")}return n.$inject=["$scope","$log"],e}function navbarDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/navbar-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t){this.isNavCollapsed=!0,this.isCollapsed=!1,this.isCollapsedHorizontal=!1,t.info("in navbar directive controller")}return n.$inject=["$scope","$log"],e}function projByRetailChannelDirective(o){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/proj-by-retail-channel-view.directive.htm",replace:!0,scope:{start:"=",end:"=",projection:"="},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(t,e,n,a){o.query.instancesByDate(t.vm.start,t.vm.end).then(function(e){t.vm.channelsList=e,t.$apply()}).catch(function(e){console.log(e)})}function n(e,t,n){this.channelsList={},t.info("in projByRetailChannelDirectiveController")}return n.$inject=["$scope","$log","firebaseService"],e}function templateProductDirective(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/templateProduct-view.directive.htm",replace:!0,scope:{},link:t,controller:n,controllerAs:"vm",bindToController:!0};function t(e,t,n,a){}function n(e,t,n,a){var o,r=this,i=0;r.productModel=a.GETproductData(n.productId),r.selectedVariant=r.productModel.defaultVariation,r.slides=[],console.log("in template product directive controller",r.productId),t.info("product model",r.productModel,r.slides);for(var s=0;s<3;s++)o=r.productModel.productShotArray[s],r.slides.push({image:o,text:"just a test",id:i++})}return n.$inject=["$scope","$log","$routeParams","dataService"],e}function dataProcessService(e){return{lineData:{fromAcctTxs:function(a){var o=[];null==a.startValue&&(a.startValue=0);var r=a.startValue;return o.push({x:0,y:r}),Object.keys(a.txs).forEach(function(e){var t=e.split("T")[1].split("-")[0],n=(t.split(":")[0],t.split(":")[1],t.split(":")[2],{x:t,y:r+=parseInt(a.txs[e].balance_change)});o.push(n)}),console.log("this is the return collection",o),o}}}}function dataService(o){return{GETaChecklist:function(e){var a="/API/data/aChecklist/"+e;return new Promise(function(t,n){o({method:"GET",url:a}).then(function(e){t(e.data)},function(e){n({assignedTo:{name:"Ian McAllister",sqId:"rUxLgAqsVklCN_14dfbE"},completed:!1,completedDate:"",createdDate:"2019-04-25T10:50:38-07:00",equipment:{"10x10CPCanopy":{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, brown 10x10 frame & top",item:"Canopy",needed:!0},Honda2200i:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Honda 2200i gas powered generator",item:"Honda Generator",needed:!0},MandelprofiMini:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Mandelprofi Mini Nut Roasting Machine",item:"Roaster",needed:!0},canopyWeights:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cement filled canopy weights",item:"Canopy Weights (4x)",needed:!0},cashBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cash box to hold cash during markets & events",item:"Cash Box",needed:!0},cleaningBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with papertowels, trash bags, first aid kit, soap, bungees, large clips, and small clips",item:"Cleaning Box",needed:!0},cookingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"All suppies required for cooking",item:"Cooking Box",needed:!0},electronicsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with ipad, scale, chip reader, swipe read, power cords, and change banks folio",item:"Electronics Box",needed:!0},fileBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"File box to contain returning ziplock bags",item:"File Box",needed:!0},galWaterJugs:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Waterjugs for kettle cleaning",item:"Gallon Water Jugs (2x)",needed:!0},handwashStation:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"5 gal catch bucket and 3 gal thermos",item:"Handwash Station",needed:!0},packagingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with small, average & impressive cones, stickers, twisties, scissors, tape, pens and example platters",item:"Packaging Box",needed:!0},platters20oz:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"10 platters (tops & bottoms) in a tote bag",item:"20oz Platters (10x)",needed:!0},scoopingBinsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with all 8 cooked nut bins, cooking mat, banners, tablecloth",item:"Scooping Bins Box",needed:!0},stingerStandard:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Extension cord with 3 pronged splitter",item:"Standard Extension Cord",needed:!0},tableRisers:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Stackable table risers in a tote bag",item:"Table Risers",needed:!0},tables:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"1 heavy duty and 3 medium duty tables",item:"Tables (4x)",needed:!0},wallsBagCP:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, walls bag with 4 walls",item:"Walls Bag",needed:!0}},id:"-LdCgUNtz_RU_a4oQSVa",kit:{name:"Kit #1",sqId:""},rawMaterials:{extraLiquids:{carafeDR6c:{discription:"6 Cups bottle of Drunken Mixture",name:"Bottle of Drunken Mix",qty:2,sqrId:""},carafeSR6c:{discription:"6 Cups bottle of Swalty Vanilla Mixture",name:"Bottle of Swalty Mix",qty:4,sqrId:""}},nuts:{fullPecans:{name:"Pecan Full Batches",discription:"Gallon ziplock bag, full batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullAlmonds:{name:"Almond Full Batches",discription:"Gallon ziplock bag, full batch of almonds & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullCashews:{name:"Cashew Full Batches",discription:"Gallon ziplock bag, full batch of cashews & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullPeanuts:{name:"Peanut Full Batches",discription:"Gallon ziplock bag, full batch of peanuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullHazelnuts:{name:"Hazlenut Full Batches",discription:"Gallon ziplock bag, full batch of hazelnuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfPecans:{name:"Pecan Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfAlmonds:{name:"Almond Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfHazelnuts:{name:"Hazlenut Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""}}},returnDate:"2019-04-28T18:00:00-07:00",shipDate:"2019-04-26T09:00:00-07:00",type:"equipment",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"})})})},GETallChecklists:function(){return new Promise(function(t,n){o({method:"GET",url:"/API/data/allChecklists"}).then(function(e){t(e.data)},function(e){n({"-LdCgUNtz_RU_a4oQSVa":{id:"-LdCgUNtz_RU_a4oQSVa",title:"Kit #2 Checkout Updated",dueDate:"05/01/19",assignedTo:{name:"Ian McAllister"},type:"Equipment Checkout",for:"Kit #1",shipDate:"2019-04-26T09:00:00-07:00",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"},somethingElse:{id:"somethingElse",title:"Kit #3 Checkout",dueDate:"05/01/19",assignedTo:"Nary Kuch",type:"Staging",for:"Warehouse",url:"/team/checklists/staging"}})})})},GETproductData:function(e){return{title:"Swalty Pecans",subtitle:"Our Most Popular Sweet & Salty Pecan Recipe",producer:"Ah-Nuts!",variations:{"ec4eb5e0-4512-11e9-acb8-d5c1e807b1b1":{price:999,unit:"for a 5oz Bag",weight:5,channel:"online"},"7c99a510-4513-11e9-80a3-2d488ae95193":{price:1599,unit:"for 2x 5oz Bags",weight:10,channel:"online"},"80ce9c30-4513-11e9-bd22-bb85ad32a990":{price:2599,unit:"for 4x 5oz Bags",weight:20,channel:"online"},"84c32ef0-4513-11e9-93b5-91165e35a5e9":{price:2999,unit:"for 5x 5oz Bags",weight:25,channel:"online"},"8926d730-4513-11e9-8b89-8f7a19e9776a":{price:3999,unit:"for 7x 5oz Bags",weight:35,channel:"online"},"8de3ea10-4513-11e9-8337-d755c0c18e40":{price:4999,unit:"for 9x 5oz Bags",weight:45,channel:"online"}},defaultVariation:"7c99a510-4513-11e9-80a3-2d488ae95193",discription:"Sweet Pecans roasted and glazed in our world famous secret recipe glaze - the perfect combination of sweet vanilla with a hint of saltiness. Mmmmm!",suggestions:"Great as a stand alone snack or chop them up and use them as a topping for ice cream, yogurt, salads and more!",rte:"Pecans, Sugar, Vanilla, Sea Salt.",certifications:{"01":"Vegan","02":"Gluten Free","03":"Contains Tree Nuts"},brandLogoUrl:"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/logos/Ah-nuts_logo.png",productShotUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"},productShotArray:["https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"],productThumbsUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png"}}}}}function firebaseService(t,e,n,a,o){function r(e){return new Promise(function(t,n){firebase.database().ref("inventory/accts").orderByChild("instance_id").equalTo(e).once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})}return{read:{inventoryInstances:function(){return console.log("reading inventory instances"),new Promise(function(t,n){firebase.database().ref("/inventory/instances").once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},instances:function(){return new Promise(function(t,n){firebase.database().ref("/instances").once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},channels:function(){return console.log("reading Channels"),new Promise(function(t,n){firebase.database().ref("/channels").once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},anInstance:function(e){var a="/instances/"+e;return console.log("reading an instance"),new Promise(function(t,n){firebase.database().ref(a).once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})}},create:{emailUser:function(e,a){return t.info("authenticating email"),new Promise(function(t,n){firebase.auth().createUserWithEmailAndPassword(e,a).then(function(e){t(e)}).catch(function(e){n(e)})})},season:function(r,i){var s={channelId:r,title:i};return console.log("creating a new season",s),new Promise(function(t,n){var e=firebase.database().ref().child("seasons").push().key,a=firebase.database().ref("/channels/"+r+"/seasons").push().key,o={};o["/seasons/"+e]=s,o["/channels/"+r+"/seasons/"+a]={seasonId:e,title:i},firebase.database().ref().update(o).then(function(e){t(e)}).catch(function(e){n(e)})})},channel:function(e,t){var a={},n=firebase.database().ref().child("channels").push().key;return a["/channels/"+n]={id:n,qbId:"",sqId:"",title:e,type:t,wiwId:""},console.log("sending this",a),new Promise(function(t,n){firebase.database().ref().update(a).then(function(e){t(e)}).catch(function(e){n(e)})})}},authenticate:{email:function(e,a){return t.info("authenticating email"),new Promise(function(t,n){firebase.auth().signInWithEmailAndPassword(e,a).then(function(e){t(e)}).catch(function(e){n(e)})})}},query:{equalTo:function(e,a,o){return console.log("equalToQuery got these values",e,a,o),new Promise(function(t,n){firebase.database().ref(e).orderByChild(a).equalTo(o).once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},instanceAccts:r,instance:function(a){return new Promise(function(t,n){var e=firebase.database().ref("instances").orderByChild("channel_id").equalTo(a);e.once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},instancesByDate:function(a,o){return new Promise(function(t,n){var e=firebase.database().ref("instances").orderByChild("opens").startAt(a).endAt(o);e.once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})},shifts:function(a){return new Promise(function(t,n){var e=firebase.database().ref("shifts").orderByChild("instance_id").equalTo(a);e.once("value").then(function(e){t(e.val())}).catch(function(e){n(e)})})}},update:{record:function(e){return console.log("reading inventory instances"),new Promise(function(t,n){firebase.database().ref().update(e).then(function(e){t(e)}).catch(function(e){n(e)})})}},push:{record:function(e){return firebase.database().ref(e).push().key}},resolve:{instanceAccts:function(e){return new Promise(function(t,n){r(e).then(function(e){t(e)}).catch(function(e){n(e)})})}},templates:{instanceFilters:function(){return{skipped:!1,filters:{employees:{},devices:{}},sales:{0:{name:"Gross Sales",reported:0,bold:!0,adjustment:0,actual:0,forecast:0,difference:0},1:{name:"Returns",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},2:{name:"Discounts & Comps",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},3:{name:"Net Sales",reported:0,bold:!0,adjustment:0,actual:0,forecast:0,difference:0},4:{name:"Tips",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},5:{name:"Total",reported:0,bold:!0,adjustment:0,actual:0,forecast:0,difference:0}},payments:{0:{name:"Total Collected",reported:0,bold:!0,adjustment:0,actual:0,forecast:0,difference:0},1:{name:"Cash",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},2:{name:"Card",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},3:{name:"Other",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},4:{name:"Fees",reported:0,bold:!1,adjustment:0,actual:0,forecast:0,difference:0},5:{name:"Net Total",reported:0,bold:!0,adjustment:0,actual:0,forecast:0,difference:0}}}}}}}function squareService(o){function a(e){var t={};return e.forEach(function(e){t[e.id]=e}),t}return{employeeList:{},_format:{employeeList:a},list:{employees:function(){return new Promise(function(n,t){o({method:"GET",url:"/square/listEmployees"}).then(function(e){var t=a(e.data);n(t)}).catch(function(e){t(e)})})},transactions:function(e,a){return new Promise(function(t,n){o({method:"GET",url:"/square/listPayments?location=M53KQT35YKE5C&start="+e+"&end="+a}).then(function(e){t(e)}).catch(function(e){n(e)})})}}}}function wiwService(e,o){return{get:{shifts:function(e){var a="/wiw/shifts?start="+e.start+"&end="+e.end;return new Promise(function(t,n){o({method:"GET",url:a}).then(function(e){t(e)}).catch(function(e){n(e)})})}},templates:{shiftData:function(){return new Object({wiwShift_id:"",shiftTeamMember:"",wiw_teamMember_id:"",teamMemberRate:"",channel_id:"",channel:"",seasons_id:"",season:"",instance_id:"",timecard_id:"",payroll_id:"",expense_id:"",status:{projected:!1,executed:!1,selected:!1},time:{start:"",end:"",dHrs:0},hrs:{reg:0,ot:0},pay:{reg_labor:0,ot_labor:0,tips:0,comm:0},commCalculatd:!1})}}}}angular.module("awesweet").controller("CMERecapController",CMERecapController),CMERecapController.$inject=["$scope","$log","$routeParams","firebaseService","$firebaseObject","inventoryInstanceAcctsList","dataProcessService"],angular.module("awesweet").controller("adminDataChannelsController",adminDataChannelsController),adminDataChannelsController.$inject=["$scope","$location","$routeParams","firebaseService","seasonsData","channelsData","instanceData"],angular.module("awesweet").controller("adminForecastController",adminForecastController),adminForecastController.$inject=["$scope","$log","$routeParams","$location","firebaseService"],angular.module("awesweet").controller("adminInvRptController",adminInvRptController),adminInvRptController.$inject=["$scope","$log"],angular.module("awesweet").controller("cartPageController",cartPageController),cartPageController.$inject=["$uibModal","$log","$document"],angular.module("awesweet").controller("ModalInstanceCtrl",ModalInstanceCtrl),ModalInstanceCtrl.$inject=["$uibModalInstance","items"],angular.module("awesweet").controller("channelsPageController",channelsPageController),channelsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("checkoutPageController",checkoutPageController),checkoutPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("dashboardPageController",dashboardPageController),dashboardPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("dataViewsController",dataViewsController),dataViewsController.$inject=["$scope","$log","$location","$routeParams","firebaseService","$http","seasonsData"],angular.module("awesweet").controller("instanceDataViewsController",instanceDataViewsController),instanceDataViewsController.$inject=["$scope","$log","firebaseService","instanceData","shiftsData"],angular.module("awesweet").controller("inventoryInstancePageController",inventoryInstancePageController),inventoryInstancePageController.$inject=["$scope","$log"],angular.module("awesweet").controller("jobsPageController",jobsPageController),jobsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("landingPageController",landingPageController),landingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("loginPageController",loginPageController),loginPageController.$inject=["$scope","$log","$http","$location","firebaseService"],angular.module("awesweet").controller("pricingPageController",pricingPageController),pricingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("productPageController",productPageController),productPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("reviewsPageController",reviewsPageController),reviewsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("storyPageController",storyPageController),storyPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("supportPageController",supportPageController),supportPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("teamChecklistsPageController",teamChecklistsPageController),teamChecklistsPageController.$inject=["$scope","$log","$routeParams","dataService"],angular.module("awesweet").controller("teamPageController",teamPageController),teamPageController.$inject=["$scope","$log","$location","dataService"],angular.module("awesweet").controller("teamDashPageController",teamDashPageController),teamDashPageController.$inject=["$scope","$log","$location","$routeParams","firebaseService"],angular.module("awesweet").controller("teamSalesSummaryPageController",teamSalesSummaryPageController),teamSalesSummaryPageController.$inject=["$scope","$log"],angular.module("awesweet").config(config),angular.module("awesweet").directive("adminInstanceShiftsDirective",adminInstanceShiftsDirective),angular.module("awesweet").directive("adminInstanceTxsDirective",adminInstanceTxsDirective),angular.module("awesweet").directive("adminInstanceReportsDirective",adminInstanceReportsDirective),angular.module("awesweet").directive("barChartDirective",barChartDirective),angular.module("awesweet").directive("footerDirective",footerDirective),angular.module("awesweet").directive("landingChannelsBannerDirective",landingChannelsBannerDirective),angular.module("awesweet").directive("landingHeroBannerDirective",landingHeroBannerDirective),angular.module("awesweet").directive("landingReviewsSliderDirective",landingReviewsSliderDirective),angular.module("awesweet").directive("lineChartDirective",lineChartDirective),angular.module("awesweet").directive("navbarDirective",navbarDirective),angular.module("awesweet").directive("projByRetailChannel",projByRetailChannelDirective),angular.module("awesweet").directive("templateProductDirective",templateProductDirective),angular.module("awesweet").factory("dataProcessService",dataProcessService),dataProcessService.$inject=["$log"],angular.module("awesweet").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("awesweet").factory("firebaseService",firebaseService),firebaseService.$inject=["$log","$http","$firebase","$firebaseObject","$firebaseArray"],angular.module("awesweet").factory("squareService",squareService),squareService.$inject=["$http"],angular.module("awesweet").factory("wiwService",wiwService),wiwService.$inject=["$log","$http"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
