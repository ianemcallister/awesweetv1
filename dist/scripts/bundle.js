config.$inject=["$routeProvider","$locationProvider"];var awesweet=angular.module("awesweet",["ngRoute","ngSanitize","ui.bootstrap","firebase","chart.js"]);function barChartDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/bar-chart.directive.htm",replace:!0,scope:{data:"="},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n,t){var o=this;o.flavors=[],o.balance=[],console.log(o.data)}return t.$inject=["$scope","$log","$firebaseObject"],e}function footerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/footer-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in footer directive controller")}return t.$inject=["$scope","$log"],e}function landingChannelsBannerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingChannelsBanner-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing channels banner directive controller")}return t.$inject=["$scope","$log"],e}function landingHeroBannerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingHeroBanner-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing hero banner directive controller")}return t.$inject=["$scope","$log"],e}function landingReviewsSliderDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingReviewsSlider-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing reviews slider directive controller")}return t.$inject=["$scope","$log"],e}function lineChartDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/line-chart.directive.htm",replace:!0,scope:{data:"="},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){e.labels=data.flavors,e.data=data.levels,n.info("in lineChartDirective controller")}return t.$inject=["$scope","$log"],e}function navbarDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/navbar-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){this.isNavCollapsed=!0,this.isCollapsed=!1,this.isCollapsedHorizontal=!1,n.info("in navbar directive controller")}return t.$inject=["$scope","$log"],e}function templateProductDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/templateProduct-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n,t,o){var a,r=this,l=0;r.productModel=o.GETproductData(t.productId),r.selectedVariant=r.productModel.defaultVariation,r.slides=[],console.log("in template product directive controller",r.productId),n.info("product model",r.productModel,r.slides);for(var i=0;i<3;i++)a=r.productModel.productShotArray[i],r.slides.push({image:a,text:"just a test",id:l++})}return t.$inject=["$scope","$log","$routeParams","dataService"],e}function CMERecapController(e,n,t,o,a,r,l){this.accts=r,this.pullClass=function(n,t){var o="";return Object.keys(n).forEach(function(e){n[e].class==t&&(o=n[e].balance)}),o},this.processLineAccts=function(e){return l.lineData.fromAcctTxs(e)},n.info("in the checkout CMERecapController",t,r)}function adminInvRptController(e,n){n.info("in the inventory reprts controller")}function cartPageController(o,a,r){var l=this;l.items=["item1","item2","item3"],l.animationsEnabled=!0,l.open=function(e,n){var t=n?angular.element(r[0].querySelector(".modal-demo "+n)):void 0;o.open({animation:l.animationsEnabled,ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",controllerAs:"vm",size:e,appendTo:t,resolve:{items:function(){return l.items}}}).result.then(function(e){l.selected=e},function(){a.info("Modal dismissed at: "+new Date)})},l.openComponentModal=function(){o.open({animation:l.animationsEnabled,component:"modalComponent",resolve:{items:function(){return l.items}}}).result.then(function(e){l.selected=e},function(){a.info("modal-component dismissed at: "+new Date)})},a.info("in the cart controller"),l.open("lg")}function ModalInstanceCtrl(e,n){var t=this;t.items=n,t.selected={item:t.items[0]},t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}function channelsPageController(e,n){n.info("in the channels controller")}function checkoutPageController(e,n,t){n.info("in the checkout controller",t)}function dashboardPageController(e,n){n.info("in the dashboard controller")}function dataViewsController(n,t,a,r,o,l){var e=a.$$path.split("/")[3],c=this;switch(c.seasonInput=!1,c.instancesInput=!1,c.aChannel={newSeason:{id:"",title:""},seasonStart:"",seasonsEnd:"",itFrequency:"",itOpens:{hr:"",min:"",AP:"",time:""},itCloses:{hr:"",min:"",AP:"",time:""},newInstancesPreview:[]},c.loadChannel=function(e){a.path("/admin/data/channel/"+e)},c.navPrevious=function(){var n=[],t=0,o=0,e=0;Object.keys(c.channels).forEach(function(e){n.push(c.channels[e]),e==r.channelId&&(o=t),t++}),0<o-1&&(e=o-1),a.path("/admin/data/channel/"+n[e].id)},c.navNext=function(){var n=[],t=0,o=0,e=0;Object.keys(c.channels).forEach(function(e){n.push(c.channels[e]),e==r.channelId&&(o=t),t++}),o+1<n.length&&(e=o+1),a.path("/admin/data/channel/"+n[e].id)},c.saveNewSeason=function(e){console.log("saving seasons: ",e),o.create.season(r.channelId,e).then(function(e){alert("Saved Successfully",e)}).catch(function(e){alert("Error Savings",e)})},c.previewIterations=function(e,n,t){var o=moment(e),a=moment(n);if(c.aChannel.newInstancesPreview=[],""!=t)switch(console.log("all values good"),t){case"Daily":for(var r=a.diff(o,"days"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"days");break;case"Weekly":for(r=a.diff(o,"weeks"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"week");break;case"Monthly":for(r=a.diff(o,"months"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"month")}},c.setItTimes=function(e,n,t,o){if(""!=n&&""!=t&&""!=o){c.aChannel[e].time="PM"==o?parseInt(n)+12+":"+t+"-07:00":n+":"+t+"-07:00";for(var a=0;a<c.aChannel.newInstancesPreview.length;a++)c.aChannel.newInstancesPreview[a][e]=c.aChannel[e].time}console.log("this time",c.aChannel.itOpens.time)},c.saveSeasonId=function(n){Object.keys(c.channelData.seasons).forEach(function(e){console.log(c.channelData.seasons[e]),c.channelData.seasons[e].title==n&&(c.aChannel.newSeason.id=c.channelData.seasons[e].seasonId)})},c.delItPreview=function(e){console.log(e,c.aChannel.newInstancesPreview[e]),c.aChannel.newInstancesPreview.splice(e,1)},c.saveIterations=function(e){console.log("got this array",e),l({method:"POST",url:"/task/addIncidenceList",data:e}).then(function(e){console.log(e)}).catch(function(e){console.log(e)})},e){case"instances_by_channel":o.read.instances().then(function(e){c.instances=e,n.$apply()}).catch(function(e){t.error(e)});break;case"channels":o.read.channels().then(function(e){c.channels=e,n.$apply()}).catch(function(e){t.error(e)});break;case"channel":console.log("$routeParams",r),o.read.channels().then(function(e){c.channels=e,c.channelData=e[r.channelId],n.$apply()}).catch(function(e){t.error(e)}),o.query.instance(r.channelId).then(function(e){c.instances=e,n.$apply()}).catch(function(e){t.error(e)})}t.info("in the data views controller",e)}function inventoryInstancePageController(e,n){n.info("in the inventory instance page controller")}function jobsPageController(e,n){n.info("in the jobs controller")}function landingPageController(e,n){n.info("in the landing controller")}function loginPageController(n,t,e,o,a){var r=this;t.info("in the login controller"),r.submit=function(){console.log("submitting form"),a.authenticate.email(r.username,r.password).then(function(e){o.path("/team/"+e.user.uid+"/dashboard"),n.$apply(),t.info(e)}).catch(function(e){t.error(e)})}}function pricingPageController(e,n){n.info("in the pricing controller")}function productPageController(e,n,t){n.info("in the products controller")}function reviewsPageController(e,n){n.info("in the reviews controller")}function storyPageController(e,n){n.info("in the story controller")}function supportPageController(e,n){n.info("in the support controller")}function teamChecklistsPageController(n,e,t,o){var a=this;a.listType=t.type,a.list={},o.GETaChecklist(t.listId).then(function(e){console.log("SUCCESS"),console.log(e),a.list=e,n.$apply()}).catch(function(e){console.log("ERROR"),console.log(e),a.list=e,n.$apply()}),e.info("in the team checklists controller",t)}function teamPageController(n,e,t,o){var a=this;a.activeChecklists=[],o.GETallChecklists().then(function(e){console.log("SUCCESS",e),a.activeChecklists=e,n.$apply()}).catch(function(e){console.log("ERROR",e),a.activeChecklists=e,n.$apply()}),a.listClicked=function(e){console.log("got this id",e),console.log("redirecting to",a.activeChecklists[e].url),t.path(a.activeChecklists[e].url)},e.info("in the team controller")}function teamDashPageController(n,t,o,a,e){var r=this;r.username=a.userId,e.read.inventoryInstances().then(function(e){r.instances=e,n.$apply()}).catch(function(e){t.error(e)}),r.loadInstance=function(e){o.path("/team/"+a.userId+"/CMERecap/"+e)},t.info("in the teamDashPageController")}function teamSalesSummaryPageController(e,n){n.info("in the teamSalesSummaryPageController")}function dataProcessService(e){return{lineData:{fromAcctTxs:function(o){var a=[];null==o.startValue&&(o.startValue=0);var r=o.startValue;return a.push({x:0,y:r}),Object.keys(o.txs).forEach(function(e){var n=e.split("T")[1].split("-")[0],t=(n.split(":")[0],n.split(":")[1],n.split(":")[2],{x:n,y:r+=parseInt(o.txs[e].balance_change)});a.push(t)}),console.log("this is the return collection",a),a}}}}function dataService(a){return{GETaChecklist:function(e){var o="/API/data/aChecklist/"+e;return new Promise(function(n,t){a({method:"GET",url:o}).then(function(e){n(e.data)},function(e){t({assignedTo:{name:"Ian McAllister",sqId:"rUxLgAqsVklCN_14dfbE"},completed:!1,completedDate:"",createdDate:"2019-04-25T10:50:38-07:00",equipment:{"10x10CPCanopy":{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, brown 10x10 frame & top",item:"Canopy",needed:!0},Honda2200i:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Honda 2200i gas powered generator",item:"Honda Generator",needed:!0},MandelprofiMini:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Mandelprofi Mini Nut Roasting Machine",item:"Roaster",needed:!0},canopyWeights:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cement filled canopy weights",item:"Canopy Weights (4x)",needed:!0},cashBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cash box to hold cash during markets & events",item:"Cash Box",needed:!0},cleaningBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with papertowels, trash bags, first aid kit, soap, bungees, large clips, and small clips",item:"Cleaning Box",needed:!0},cookingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"All suppies required for cooking",item:"Cooking Box",needed:!0},electronicsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with ipad, scale, chip reader, swipe read, power cords, and change banks folio",item:"Electronics Box",needed:!0},fileBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"File box to contain returning ziplock bags",item:"File Box",needed:!0},galWaterJugs:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Waterjugs for kettle cleaning",item:"Gallon Water Jugs (2x)",needed:!0},handwashStation:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"5 gal catch bucket and 3 gal thermos",item:"Handwash Station",needed:!0},packagingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with small, average & impressive cones, stickers, twisties, scissors, tape, pens and example platters",item:"Packaging Box",needed:!0},platters20oz:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"10 platters (tops & bottoms) in a tote bag",item:"20oz Platters (10x)",needed:!0},scoopingBinsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with all 8 cooked nut bins, cooking mat, banners, tablecloth",item:"Scooping Bins Box",needed:!0},stingerStandard:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Extension cord with 3 pronged splitter",item:"Standard Extension Cord",needed:!0},tableRisers:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Stackable table risers in a tote bag",item:"Table Risers",needed:!0},tables:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"1 heavy duty and 3 medium duty tables",item:"Tables (4x)",needed:!0},wallsBagCP:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, walls bag with 4 walls",item:"Walls Bag",needed:!0}},id:"-LdCgUNtz_RU_a4oQSVa",kit:{name:"Kit #1",sqId:""},rawMaterials:{extraLiquids:{carafeDR6c:{discription:"6 Cups bottle of Drunken Mixture",name:"Bottle of Drunken Mix",qty:2,sqrId:""},carafeSR6c:{discription:"6 Cups bottle of Swalty Vanilla Mixture",name:"Bottle of Swalty Mix",qty:4,sqrId:""}},nuts:{fullPecans:{name:"Pecan Full Batches",discription:"Gallon ziplock bag, full batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullAlmonds:{name:"Almond Full Batches",discription:"Gallon ziplock bag, full batch of almonds & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullCashews:{name:"Cashew Full Batches",discription:"Gallon ziplock bag, full batch of cashews & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullPeanuts:{name:"Peanut Full Batches",discription:"Gallon ziplock bag, full batch of peanuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullHazelnuts:{name:"Hazlenut Full Batches",discription:"Gallon ziplock bag, full batch of hazelnuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfPecans:{name:"Pecan Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfAlmonds:{name:"Almond Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfHazelnuts:{name:"Hazlenut Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""}}},returnDate:"2019-04-28T18:00:00-07:00",shipDate:"2019-04-26T09:00:00-07:00",type:"equipment",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"})})})},GETallChecklists:function(){return new Promise(function(n,t){a({method:"GET",url:"/API/data/allChecklists"}).then(function(e){n(e.data)},function(e){t({"-LdCgUNtz_RU_a4oQSVa":{id:"-LdCgUNtz_RU_a4oQSVa",title:"Kit #2 Checkout Updated",dueDate:"05/01/19",assignedTo:{name:"Ian McAllister"},type:"Equipment Checkout",for:"Kit #1",shipDate:"2019-04-26T09:00:00-07:00",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"},somethingElse:{id:"somethingElse",title:"Kit #3 Checkout",dueDate:"05/01/19",assignedTo:"Nary Kuch",type:"Staging",for:"Warehouse",url:"/team/checklists/staging"}})})})},GETproductData:function(e){return{title:"Swalty Pecans",subtitle:"Our Most Popular Sweet & Salty Pecan Recipe",producer:"Ah-Nuts!",variations:{"ec4eb5e0-4512-11e9-acb8-d5c1e807b1b1":{price:999,unit:"for a 5oz Bag",weight:5,channel:"online"},"7c99a510-4513-11e9-80a3-2d488ae95193":{price:1599,unit:"for 2x 5oz Bags",weight:10,channel:"online"},"80ce9c30-4513-11e9-bd22-bb85ad32a990":{price:2599,unit:"for 4x 5oz Bags",weight:20,channel:"online"},"84c32ef0-4513-11e9-93b5-91165e35a5e9":{price:2999,unit:"for 5x 5oz Bags",weight:25,channel:"online"},"8926d730-4513-11e9-8b89-8f7a19e9776a":{price:3999,unit:"for 7x 5oz Bags",weight:35,channel:"online"},"8de3ea10-4513-11e9-8337-d755c0c18e40":{price:4999,unit:"for 9x 5oz Bags",weight:45,channel:"online"}},defaultVariation:"7c99a510-4513-11e9-80a3-2d488ae95193",discription:"Sweet Pecans roasted and glazed in our world famous secret recipe glaze - the perfect combination of sweet vanilla with a hint of saltiness. Mmmmm!",suggestions:"Great as a stand alone snack or chop them up and use them as a topping for ice cream, yogurt, salads and more!",rte:"Pecans, Sugar, Vanilla, Sea Salt.",certifications:{"01":"Vegan","02":"Gluten Free","03":"Contains Tree Nuts"},brandLogoUrl:"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/logos/Ah-nuts_logo.png",productShotUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"},productShotArray:["https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"],productThumbsUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png"}}}}}function firebaseService(n,e,t,o,a){function r(e){return new Promise(function(n,t){firebase.database().ref("inventory/accts").orderByChild("instance_id").equalTo(e).once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}return{read:{inventoryInstances:function(){return console.log("reading inventory instances"),new Promise(function(n,t){firebase.database().ref("/inventory/instances").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})},instances:function(){return console.log("reading instances"),new Promise(function(n,t){firebase.database().ref("/instances").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})},channels:function(){return console.log("reading Channels"),new Promise(function(n,t){firebase.database().ref("/channels").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}},create:{emailUser:function(e,o){return n.info("authenticating email"),new Promise(function(n,t){firebase.auth().createUserWithEmailAndPassword(e,o).then(function(e){n(e)}).catch(function(e){t(e)})})},season:function(r,e){var l={channelId:r,title:e};return console.log("creating a new season",l),new Promise(function(n,t){var e=firebase.database().ref().child("seasons").push().key,o=firebase.database().ref("/channels/"+r+"/seasons").push().key,a={};a["/seasons/"+e]=l,a["/channels/"+r+"/seasons/"+o]=l,firebase.database().ref().update(a).then(function(e){n(e)}).catch(function(e){t(e)})})}},authenticate:{email:function(e,o){return n.info("authenticating email"),new Promise(function(n,t){firebase.auth().signInWithEmailAndPassword(e,o).then(function(e){n(e)}).catch(function(e){t(e)})})}},query:{instanceAccts:r,instance:function(o){return new Promise(function(n,t){var e=firebase.database().ref("instances").orderByChild("channel_id").equalTo(o);e.once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}},resolve:{instanceAccts:function(e){return new Promise(function(n,t){r(e).then(function(e){n(e)}).catch(function(e){t(e)})})}}}}function config(e,n){n.hashPrefix(""),e.when("/",{templateUrl:"views/landing-page.htm",controller:"landingPageController",controllerAs:"vm"}).when("/products",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productName/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/pricing",{templateUrl:"views/pricing-page.htm",controller:"pricingPageController",controllerAs:"vm"}).when("/story",{templateUrl:"views/story-page.htm",controller:"storyPageController",controllerAs:"vm"}).when("/channels",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/channels/:channelId",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/support",{templateUrl:"views/support-page.htm",controller:"supportPageController",controllerAs:"vm"}).when("/reviews",{templateUrl:"views/reviews-page.htm",controller:"reviewsPageController",controllerAs:"vm"}).when("/jobs",{templateUrl:"views/jobs-page.htm",controller:"jobsPageController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cart-page.htm",controller:"cartPageController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId/:ticketId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/login",{templateUrl:"views/login-page.htm",controller:"loginPageController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"views/dashboard-page.htm",controller:"dashboardPageController",controllerAs:"vm"}).when("/admin",{}).when("/admin/data/instances_by_channel",{templateUrl:"views/data_instances_by_cannel.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/channels",{templateUrl:"views/data_channels.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/channel/:channelId",{templateUrl:"views/data_channel_view.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/inventory/instance/:instanceId",{templateUrl:"views/inventory-instance-page.htm",controller:"inventoryInstancePageController",controllerAs:"vm"}).when("/admin/inventory/operations",{}).when("/admin/inventory/templates",{}).when("/admin/inventory/reports",{templateUrl:"views/admin-inv-rpt-page.htm",controller:"adminInvRptController",controllerAs:"vm"}).when("/team",{templateUrl:"views/team-page.htm",controller:"teamPageController",controllerAs:"vm"}).when("/team/:userId/dashboard",{templateUrl:"views/team-dash-page.htm",controller:"teamDashPageController",controllerAs:"vm"}).when("/team/:userId/CMERecap/:instanceId",{templateUrl:"views/cme-recap-page.htm",controller:"CMERecapController",controllerAs:"vm",resolve:{inventoryInstanceAcctsList:["firebaseService","$route",function(e,n){return e.resolve.instanceAccts(n.current.params.instanceId)}]}}).when("/team/checklists/:type/:listId",{templateUrl:"views/teamChecklists-page.htm",controller:"teamChecklistsPageController",controllerAs:"vm"}).when("/team/salesSummary",{templateUrl:"views/teamSalesSummary-page.htm",controller:"teamSalesSummaryPageController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}angular.module("awesweet").directive("barChartDirective",barChartDirective),angular.module("awesweet").directive("footerDirective",footerDirective),angular.module("awesweet").directive("landingChannelsBannerDirective",landingChannelsBannerDirective),angular.module("awesweet").directive("landingHeroBannerDirective",landingHeroBannerDirective),angular.module("awesweet").directive("landingReviewsSliderDirective",landingReviewsSliderDirective),angular.module("awesweet").directive("lineChartDirective",lineChartDirective),angular.module("awesweet").directive("navbarDirective",navbarDirective),angular.module("awesweet").directive("templateProductDirective",templateProductDirective),angular.module("awesweet").controller("CMERecapController",CMERecapController),CMERecapController.$inject=["$scope","$log","$routeParams","firebaseService","$firebaseObject","inventoryInstanceAcctsList","dataProcessService"],angular.module("awesweet").controller("adminInvRptController",adminInvRptController),adminInvRptController.$inject=["$scope","$log"],angular.module("awesweet").controller("cartPageController",cartPageController),cartPageController.$inject=["$uibModal","$log","$document"],angular.module("awesweet").controller("ModalInstanceCtrl",ModalInstanceCtrl),ModalInstanceCtrl.$inject=["$uibModalInstance","items"],angular.module("awesweet").controller("channelsPageController",channelsPageController),channelsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("checkoutPageController",checkoutPageController),checkoutPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("dashboardPageController",dashboardPageController),dashboardPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("dataViewsController",dataViewsController),dataViewsController.$inject=["$scope","$log","$location","$routeParams","firebaseService","$http"],angular.module("awesweet").controller("inventoryInstancePageController",inventoryInstancePageController),inventoryInstancePageController.$inject=["$scope","$log"],angular.module("awesweet").controller("jobsPageController",jobsPageController),jobsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("landingPageController",landingPageController),landingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("loginPageController",loginPageController),loginPageController.$inject=["$scope","$log","$http","$location","firebaseService"],angular.module("awesweet").controller("pricingPageController",pricingPageController),pricingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("productPageController",productPageController),productPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("reviewsPageController",reviewsPageController),reviewsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("storyPageController",storyPageController),storyPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("supportPageController",supportPageController),supportPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("teamChecklistsPageController",teamChecklistsPageController),teamChecklistsPageController.$inject=["$scope","$log","$routeParams","dataService"],angular.module("awesweet").controller("teamPageController",teamPageController),teamPageController.$inject=["$scope","$log","$location","dataService"],angular.module("awesweet").controller("teamDashPageController",teamDashPageController),teamDashPageController.$inject=["$scope","$log","$location","$routeParams","firebaseService"],angular.module("awesweet").controller("teamSalesSummaryPageController",teamSalesSummaryPageController),teamSalesSummaryPageController.$inject=["$scope","$log"],angular.module("awesweet").factory("dataProcessService",dataProcessService),dataProcessService.$inject=["$log"],angular.module("awesweet").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("awesweet").factory("firebaseService",firebaseService),firebaseService.$inject=["$log","$http","$firebase","$firebaseObject","$firebaseArray"],angular.module("awesweet").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
