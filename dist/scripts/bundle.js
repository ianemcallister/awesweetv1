config.$inject=["$routeProvider","$locationProvider"];var awesweet=angular.module("awesweet",["ngRoute","ngSanitize","ui.bootstrap","firebase","chart.js"]);function CMERecapController(e,n,t,o,a,r,l){var i=this;i.accts=r,i.pullClass=function(n,t){var o="";return Object.keys(n).forEach(function(e){n[e].class==t&&(o=n[e].balance)}),o},i.processLineAccts=function(e){return l.lineData.fromAcctTxs(e)},n.info("in the checkout CMERecapController",t,r)}function adminForecastController(e,n,t,o){var a=this;a.year=t.year,a.week=t.week,a.start=function(e,n){var t=moment(new Date(2018,11,31)),o=0;o=2019<e?o+52*(e-2019)-1+parseInt(n):o-1+parseInt(n);var a=t.add(o,"w");return console.log("adding",o,"weeks",a.format()),a.format()}(a.year,a.week),a.end=moment(a.start).add(6,"d").format(),a.inflows=[{testing:"firest test"}],a.outflows=[{testing:"firest test"}],a.changeWeek=function(e,n){var t=parseInt(e)+parseInt(n);console.log("new week",t),t<53&&0<t?o.path("admin/forecasts/weekly/"+a.year+"/"+t):console.log("problem")},n.info("in the adminForecastController",t,a.start)}function adminInvRptController(e,n){n.info("in the inventory reprts controller")}function cartPageController(o,a,r){var l=this;l.items=["item1","item2","item3"],l.animationsEnabled=!0,l.open=function(e,n){var t=n?angular.element(r[0].querySelector(".modal-demo "+n)):void 0;o.open({animation:l.animationsEnabled,ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",controllerAs:"vm",size:e,appendTo:t,resolve:{items:function(){return l.items}}}).result.then(function(e){l.selected=e},function(){a.info("Modal dismissed at: "+new Date)})},l.openComponentModal=function(){o.open({animation:l.animationsEnabled,component:"modalComponent",resolve:{items:function(){return l.items}}}).result.then(function(e){l.selected=e},function(){a.info("modal-component dismissed at: "+new Date)})},a.info("in the cart controller"),l.open("lg")}function ModalInstanceCtrl(e,n){var t=this;t.items=n,t.selected={item:t.items[0]},t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}function channelsPageController(e,n){n.info("in the channels controller")}function checkoutPageController(e,n,t){n.info("in the checkout controller",t)}function dashboardPageController(e,n){n.info("in the dashboard controller")}function dataViewsController(n,t,a,r,o,l){var e=a.$$path.split("/")[3],c=this;switch(c.seasonInput=!1,c.instancesInput=!1,c.aChannel={newSeason:{id:"",title:""},seasonStart:"",seasonsEnd:"",itFrequency:"",itOpens:{hr:"",min:"",AP:"",time:""},itCloses:{hr:"",min:"",AP:"",time:""},newInstancesPreview:[]},c.loadChannel=function(e){a.path("/admin/data/channel/"+e)},c.navPrevious=function(){var n=[],t=0,o=0,e=0;Object.keys(c.channels).forEach(function(e){n.push(c.channels[e]),e==r.channelId&&(o=t),t++}),0<o-1&&(e=o-1),a.path("/admin/data/channel/"+n[e].id)},c.navNext=function(){var n=[],t=0,o=0,e=0;Object.keys(c.channels).forEach(function(e){n.push(c.channels[e]),e==r.channelId&&(o=t),t++}),o+1<n.length&&(e=o+1),a.path("/admin/data/channel/"+n[e].id)},c.saveNewSeason=function(e){console.log("saving seasons: ",e),o.create.season(r.channelId,e).then(function(e){alert("Saved Successfully",e)}).catch(function(e){alert("Error Savings",e)})},c.previewIterations=function(e,n,t){var o=moment(e),a=moment(n);if(c.aChannel.newInstancesPreview=[],""!=t)switch(console.log("all values good"),t){case"Daily":for(var r=a.diff(o,"days"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"days");break;case"Weekly":for(r=a.diff(o,"weeks"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"week");break;case"Bi-Weekly":for(r=a.diff(o,"weeks")/2,l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(2,"week");break;case"Monthly":for(r=a.diff(o,"months"),l=o,i=0;i<=r;i++)c.aChannel.newInstancesPreview.push({instance:i+1,channel:{channel_id:c.channelData.id,channel_name:c.channelData.title},season:{seasonId:c.aChannel.newSeason.id,title:c.aChannel.newSeason.title},date:l.format()}),l=l.add(1,"month")}},c.setItTimes=function(e,n,t,o){if(""!=n&&""!=t&&""!=o){c.aChannel[e].time="PM"==o?parseInt(n)+12+":"+t+"-07:00":n+":"+t+"-07:00";for(var a=0;a<c.aChannel.newInstancesPreview.length;a++)c.aChannel.newInstancesPreview[a][e]=c.aChannel[e].time}console.log("this time",c.aChannel.itOpens.time)},c.saveSeasonId=function(n){console.log("got this value",n,"looking at this data",c.channelData.seasons),Object.keys(c.channelData.seasons).forEach(function(e){c.channelData.seasons[e].title==n?(console.log("found season id",c.channelData.seasons[e].seasonId),c.aChannel.newSeason.id=c.channelData.seasons[e].seasonId):console.log("no season ID found")})},c.delItPreview=function(e){console.log(e,c.aChannel.newInstancesPreview[e]),c.aChannel.newInstancesPreview.splice(e,1)},c.saveIterations=function(e){console.log("got this array",e),l({method:"POST",url:"/task/addIncidenceList",data:e}).then(function(e){console.log(e)}).catch(function(e){console.log(e)})},c.instanceReroute=function(e){console.log("got this id",e)},e){case"instances_by_channel":o.read.instances().then(function(e){c.instances=e,n.$apply()}).catch(function(e){t.error(e)});break;case"channels":o.read.channels().then(function(e){c.channels=e,n.$apply()}).catch(function(e){t.error(e)});break;case"channel":console.log("$routeParams",r),o.read.channels().then(function(e){c.channels=e,c.channelData=e[r.channelId],n.$apply()}).catch(function(e){t.error(e)}),o.query.instance(r.channelId).then(function(e){c.instances=e,n.$apply()}).catch(function(e){t.error(e)})}t.info("in the data views controller",e)}function instanceDataViewsController(e,n){n.info("in the instance Data Views controller")}function inventoryInstancePageController(e,n){n.info("in the inventory instance page controller")}function jobsPageController(e,n){n.info("in the jobs controller")}function landingPageController(e,n){n.info("in the landing controller")}function loginPageController(n,t,e,o,a){var r=this;t.info("in the login controller"),r.submit=function(){console.log("submitting form"),a.authenticate.email(r.username,r.password).then(function(e){o.path("/team/"+e.user.uid+"/dashboard"),n.$apply(),t.info(e)}).catch(function(e){t.error(e)})}}function pricingPageController(e,n){n.info("in the pricing controller")}function productPageController(e,n,t){n.info("in the products controller")}function reviewsPageController(e,n){n.info("in the reviews controller")}function storyPageController(e,n){n.info("in the story controller")}function supportPageController(e,n){n.info("in the support controller")}function teamChecklistsPageController(n,e,t,o){var a=this;a.listType=t.type,a.list={},o.GETaChecklist(t.listId).then(function(e){console.log("SUCCESS"),console.log(e),a.list=e,n.$apply()}).catch(function(e){console.log("ERROR"),console.log(e),a.list=e,n.$apply()}),e.info("in the team checklists controller",t)}function teamPageController(n,e,t,o){var a=this;a.activeChecklists=[],o.GETallChecklists().then(function(e){console.log("SUCCESS",e),a.activeChecklists=e,n.$apply()}).catch(function(e){console.log("ERROR",e),a.activeChecklists=e,n.$apply()}),a.listClicked=function(e){console.log("got this id",e),console.log("redirecting to",a.activeChecklists[e].url),t.path(a.activeChecklists[e].url)},e.info("in the team controller")}function teamDashPageController(n,t,o,a,e){var r=this;r.username=a.userId,e.read.inventoryInstances().then(function(e){r.instances=e,n.$apply()}).catch(function(e){t.error(e)}),r.loadInstance=function(e){o.path("/team/"+a.userId+"/CMERecap/"+e)},t.info("in the teamDashPageController")}function teamSalesSummaryPageController(e,n){n.info("in the teamSalesSummaryPageController")}function dataProcessService(e){return{lineData:{fromAcctTxs:function(o){var a=[];null==o.startValue&&(o.startValue=0);var r=o.startValue;return a.push({x:0,y:r}),Object.keys(o.txs).forEach(function(e){var n=e.split("T")[1].split("-")[0],t=(n.split(":")[0],n.split(":")[1],n.split(":")[2],{x:n,y:r+=parseInt(o.txs[e].balance_change)});a.push(t)}),console.log("this is the return collection",a),a}}}}function dataService(a){return{GETaChecklist:function(e){var o="/API/data/aChecklist/"+e;return new Promise(function(n,t){a({method:"GET",url:o}).then(function(e){n(e.data)},function(e){t({assignedTo:{name:"Ian McAllister",sqId:"rUxLgAqsVklCN_14dfbE"},completed:!1,completedDate:"",createdDate:"2019-04-25T10:50:38-07:00",equipment:{"10x10CPCanopy":{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, brown 10x10 frame & top",item:"Canopy",needed:!0},Honda2200i:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Honda 2200i gas powered generator",item:"Honda Generator",needed:!0},MandelprofiMini:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Mandelprofi Mini Nut Roasting Machine",item:"Roaster",needed:!0},canopyWeights:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cement filled canopy weights",item:"Canopy Weights (4x)",needed:!0},cashBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Cash box to hold cash during markets & events",item:"Cash Box",needed:!0},cleaningBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with papertowels, trash bags, first aid kit, soap, bungees, large clips, and small clips",item:"Cleaning Box",needed:!0},cookingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"All suppies required for cooking",item:"Cooking Box",needed:!0},electronicsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with ipad, scale, chip reader, swipe read, power cords, and change banks folio",item:"Electronics Box",needed:!0},fileBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"File box to contain returning ziplock bags",item:"File Box",needed:!0},galWaterJugs:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Waterjugs for kettle cleaning",item:"Gallon Water Jugs (2x)",needed:!0},handwashStation:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"5 gal catch bucket and 3 gal thermos",item:"Handwash Station",needed:!0},packagingBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with small, average & impressive cones, stickers, twisties, scissors, tape, pens and example platters",item:"Packaging Box",needed:!0},platters20oz:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"10 platters (tops & bottoms) in a tote bag",item:"20oz Platters (10x)",needed:!0},scoopingBinsBox:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Box with all 8 cooked nut bins, cooking mat, banners, tablecloth",item:"Scooping Bins Box",needed:!0},stingerStandard:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Extension cord with 3 pronged splitter",item:"Standard Extension Cord",needed:!0},tableRisers:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"Stackable table risers in a tote bag",item:"Table Risers",needed:!0},tables:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"1 heavy duty and 3 medium duty tables",item:"Tables (4x)",needed:!0},wallsBagCP:{confirmed:!1,confirmedAt:"",confirmedBy:"",discription:"California Palm, walls bag with 4 walls",item:"Walls Bag",needed:!0}},id:"-LdCgUNtz_RU_a4oQSVa",kit:{name:"Kit #1",sqId:""},rawMaterials:{extraLiquids:{carafeDR6c:{discription:"6 Cups bottle of Drunken Mixture",name:"Bottle of Drunken Mix",qty:2,sqrId:""},carafeSR6c:{discription:"6 Cups bottle of Swalty Vanilla Mixture",name:"Bottle of Swalty Mix",qty:4,sqrId:""}},nuts:{fullPecans:{name:"Pecan Full Batches",discription:"Gallon ziplock bag, full batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullAlmonds:{name:"Almond Full Batches",discription:"Gallon ziplock bag, full batch of almonds & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullCashews:{name:"Cashew Full Batches",discription:"Gallon ziplock bag, full batch of cashews & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullPeanuts:{name:"Peanut Full Batches",discription:"Gallon ziplock bag, full batch of peanuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},fullHazelnuts:{name:"Hazlenut Full Batches",discription:"Gallon ziplock bag, full batch of hazelnuts & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfPecans:{name:"Pecan Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfAlmonds:{name:"Almond Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""},halfHazelnuts:{name:"Hazlenut Half Batches",discription:"Quart ziplock bag, half batch of pecans & sugar",allocated:0,collected:0,difference:0,completed:!1,completedBy:"",completedAt:"",sqrId:""}}},returnDate:"2019-04-28T18:00:00-07:00",shipDate:"2019-04-26T09:00:00-07:00",type:"equipment",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"})})})},GETallChecklists:function(){return new Promise(function(n,t){a({method:"GET",url:"/API/data/allChecklists"}).then(function(e){n(e.data)},function(e){t({"-LdCgUNtz_RU_a4oQSVa":{id:"-LdCgUNtz_RU_a4oQSVa",title:"Kit #2 Checkout Updated",dueDate:"05/01/19",assignedTo:{name:"Ian McAllister"},type:"Equipment Checkout",for:"Kit #1",shipDate:"2019-04-26T09:00:00-07:00",url:"/team/checklists/equipment/-LdCgUNtz_RU_a4oQSVa"},somethingElse:{id:"somethingElse",title:"Kit #3 Checkout",dueDate:"05/01/19",assignedTo:"Nary Kuch",type:"Staging",for:"Warehouse",url:"/team/checklists/staging"}})})})},GETproductData:function(e){return{title:"Swalty Pecans",subtitle:"Our Most Popular Sweet & Salty Pecan Recipe",producer:"Ah-Nuts!",variations:{"ec4eb5e0-4512-11e9-acb8-d5c1e807b1b1":{price:999,unit:"for a 5oz Bag",weight:5,channel:"online"},"7c99a510-4513-11e9-80a3-2d488ae95193":{price:1599,unit:"for 2x 5oz Bags",weight:10,channel:"online"},"80ce9c30-4513-11e9-bd22-bb85ad32a990":{price:2599,unit:"for 4x 5oz Bags",weight:20,channel:"online"},"84c32ef0-4513-11e9-93b5-91165e35a5e9":{price:2999,unit:"for 5x 5oz Bags",weight:25,channel:"online"},"8926d730-4513-11e9-8b89-8f7a19e9776a":{price:3999,unit:"for 7x 5oz Bags",weight:35,channel:"online"},"8de3ea10-4513-11e9-8337-d755c0c18e40":{price:4999,unit:"for 9x 5oz Bags",weight:45,channel:"online"}},defaultVariation:"7c99a510-4513-11e9-80a3-2d488ae95193",discription:"Sweet Pecans roasted and glazed in our world famous secret recipe glaze - the perfect combination of sweet vanilla with a hint of saltiness. Mmmmm!",suggestions:"Great as a stand alone snack or chop them up and use them as a topping for ice cream, yogurt, salads and more!",rte:"Pecans, Sugar, Vanilla, Sea Salt.",certifications:{"01":"Vegan","02":"Gluten Free","03":"Contains Tree Nuts"},brandLogoUrl:"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/logos/Ah-nuts_logo.png",productShotUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"},productShotArray:["https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps01.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps02.png","https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/SR-pecans-ps03.png"],productThumbsUrls:{"01":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","02":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png","03":"https://s3-us-west-2.amazonaws.com/awe-sweet-assets/products/thumbs/SR-pecans-ps03-thumb.png"}}}}}function firebaseService(n,e,t,o,a){function r(e){return new Promise(function(n,t){firebase.database().ref("inventory/accts").orderByChild("instance_id").equalTo(e).once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}return{read:{inventoryInstances:function(){return console.log("reading inventory instances"),new Promise(function(n,t){firebase.database().ref("/inventory/instances").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})},instances:function(){return console.log("reading instances"),new Promise(function(n,t){firebase.database().ref("/instances").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})},channels:function(){return console.log("reading Channels"),new Promise(function(n,t){firebase.database().ref("/channels").once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}},create:{emailUser:function(e,o){return n.info("authenticating email"),new Promise(function(n,t){firebase.auth().createUserWithEmailAndPassword(e,o).then(function(e){n(e)}).catch(function(e){t(e)})})},season:function(r,l){var i={channelId:r,title:l};return console.log("creating a new season",i),new Promise(function(n,t){var e=firebase.database().ref().child("seasons").push().key,o=firebase.database().ref("/channels/"+r+"/seasons").push().key,a={};a["/seasons/"+e]=i,a["/channels/"+r+"/seasons/"+o]={seasonId:e,title:l},firebase.database().ref().update(a).then(function(e){n(e)}).catch(function(e){t(e)})})}},authenticate:{email:function(e,o){return n.info("authenticating email"),new Promise(function(n,t){firebase.auth().signInWithEmailAndPassword(e,o).then(function(e){n(e)}).catch(function(e){t(e)})})}},query:{instanceAccts:r,instance:function(o){return new Promise(function(n,t){var e=firebase.database().ref("instances").orderByChild("channel_id").equalTo(o);e.once("value").then(function(e){n(e.val())}).catch(function(e){t(e)})})}},resolve:{instanceAccts:function(e){return new Promise(function(n,t){r(e).then(function(e){n(e)}).catch(function(e){t(e)})})}}}}function barChartDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/bar-chart.directive.htm",replace:!0,scope:{data:"="},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n,t){var o=this;o.flavors=[],o.balance=[],console.log(o.data)}return t.$inject=["$scope","$log","$firebaseObject"],e}function footerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/footer-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in footer directive controller")}return t.$inject=["$scope","$log"],e}function landingChannelsBannerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingChannelsBanner-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing channels banner directive controller")}return t.$inject=["$scope","$log"],e}function landingHeroBannerDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingHeroBanner-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing hero banner directive controller")}return t.$inject=["$scope","$log"],e}function landingReviewsSliderDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/landingReviewsSlider-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){n.info("in landing reviews slider directive controller")}return t.$inject=["$scope","$log"],e}function lineChartDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/line-chart.directive.htm",replace:!0,scope:{data:"="},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){e.labels=data.flavors,e.data=data.levels,n.info("in lineChartDirective controller")}return t.$inject=["$scope","$log"],e}function navbarDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/navbar-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n){this.isNavCollapsed=!0,this.isCollapsed=!1,this.isCollapsedHorizontal=!1,n.info("in navbar directive controller")}return t.$inject=["$scope","$log"],e}function templateProductDirective(){n.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/templateProduct-view.directive.htm",replace:!0,scope:{},link:n,controller:t,controllerAs:"vm",bindToController:!0};function n(e,n,t,o){}function t(e,n,t,o){var a,r=this,l=0;r.productModel=o.GETproductData(t.productId),r.selectedVariant=r.productModel.defaultVariation,r.slides=[],console.log("in template product directive controller",r.productId),n.info("product model",r.productModel,r.slides);for(var i=0;i<3;i++)a=r.productModel.productShotArray[i],r.slides.push({image:a,text:"just a test",id:l++})}return t.$inject=["$scope","$log","$routeParams","dataService"],e}function config(e,n){n.hashPrefix(""),e.when("/",{templateUrl:"views/landing-page.htm",controller:"landingPageController",controllerAs:"vm"}).when("/products",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productName/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/products/:productId",{templateUrl:"views/products-page.htm",controller:"productPageController",controllerAs:"vm"}).when("/pricing",{templateUrl:"views/pricing-page.htm",controller:"pricingPageController",controllerAs:"vm"}).when("/story",{templateUrl:"views/story-page.htm",controller:"storyPageController",controllerAs:"vm"}).when("/channels",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/channels/:channelId",{templateUrl:"views/channels-page.htm",controller:"channelsPageController",controllerAs:"vm"}).when("/support",{templateUrl:"views/support-page.htm",controller:"supportPageController",controllerAs:"vm"}).when("/reviews",{templateUrl:"views/reviews-page.htm",controller:"reviewsPageController",controllerAs:"vm"}).when("/jobs",{templateUrl:"views/jobs-page.htm",controller:"jobsPageController",controllerAs:"vm"}).when("/cart",{templateUrl:"views/cart-page.htm",controller:"cartPageController",controllerAs:"vm"}).when("/checkout",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/checkout/:sessionId/:ticketId",{templateUrl:"views/checkout-page.htm",controller:"checkoutPageController",controllerAs:"vm"}).when("/login",{templateUrl:"views/login-page.htm",controller:"loginPageController",controllerAs:"vm"}).when("/dashboard",{templateUrl:"views/dashboard-page.htm",controller:"dashboardPageController",controllerAs:"vm"}).when("/admin",{}).when("/admin/data/instances_by_channel",{templateUrl:"views/data_instances_by_cannel.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/channels",{templateUrl:"views/data_channels.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/channel/:channelId",{templateUrl:"views/data_channel_view.htm",controller:"dataViewsController",controllerAs:"vm"}).when("/admin/data/instance/:instanceId",{templateUrl:"views/instance_data_view.htm",controller:"instanceDataViewsController",controllerAs:"vm"}).when("/admin/inventory/instance/:instanceId",{templateUrl:"views/inventory-instance-page.htm",controller:"inventoryInstancePageController",controllerAs:"vm"}).when("/admin/forecasts/weekly/:year/:week",{templateUrl:"views/admin-forecast-week-page.htm",controller:"adminForecastController",controllerAs:"vm"}).when("/admin/inventory/operations",{}).when("/admin/inventory/templates",{}).when("/admin/inventory/reports",{templateUrl:"views/admin-inv-rpt-page.htm",controller:"adminInvRptController",controllerAs:"vm"}).when("/team",{templateUrl:"views/team-page.htm",controller:"teamPageController",controllerAs:"vm"}).when("/team/:userId/dashboard",{templateUrl:"views/team-dash-page.htm",controller:"teamDashPageController",controllerAs:"vm"}).when("/team/:userId/CMERecap/:instanceId",{templateUrl:"views/cme-recap-page.htm",controller:"CMERecapController",controllerAs:"vm",resolve:{inventoryInstanceAcctsList:["firebaseService","$route",function(e,n){return e.resolve.instanceAccts(n.current.params.instanceId)}]}}).when("/team/checklists/:type/:listId",{templateUrl:"views/teamChecklists-page.htm",controller:"teamChecklistsPageController",controllerAs:"vm"}).when("/team/salesSummary",{templateUrl:"views/teamSalesSummary-page.htm",controller:"teamSalesSummaryPageController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}angular.module("awesweet").controller("CMERecapController",CMERecapController),CMERecapController.$inject=["$scope","$log","$routeParams","firebaseService","$firebaseObject","inventoryInstanceAcctsList","dataProcessService"],angular.module("awesweet").controller("adminForecastController",adminForecastController),adminForecastController.$inject=["$scope","$log","$routeParams","$location"],angular.module("awesweet").controller("adminInvRptController",adminInvRptController),adminInvRptController.$inject=["$scope","$log"],angular.module("awesweet").controller("cartPageController",cartPageController),cartPageController.$inject=["$uibModal","$log","$document"],angular.module("awesweet").controller("ModalInstanceCtrl",ModalInstanceCtrl),ModalInstanceCtrl.$inject=["$uibModalInstance","items"],angular.module("awesweet").controller("channelsPageController",channelsPageController),channelsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("checkoutPageController",checkoutPageController),checkoutPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("dashboardPageController",dashboardPageController),dashboardPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("dataViewsController",dataViewsController),dataViewsController.$inject=["$scope","$log","$location","$routeParams","firebaseService","$http"],angular.module("awesweet").controller("instanceDataViewsController",instanceDataViewsController),instanceDataViewsController.$inject=["$scope","$log"],angular.module("awesweet").controller("inventoryInstancePageController",inventoryInstancePageController),inventoryInstancePageController.$inject=["$scope","$log"],angular.module("awesweet").controller("jobsPageController",jobsPageController),jobsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("landingPageController",landingPageController),landingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("loginPageController",loginPageController),loginPageController.$inject=["$scope","$log","$http","$location","firebaseService"],angular.module("awesweet").controller("pricingPageController",pricingPageController),pricingPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("productPageController",productPageController),productPageController.$inject=["$scope","$log","$routeParams"],angular.module("awesweet").controller("reviewsPageController",reviewsPageController),reviewsPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("storyPageController",storyPageController),storyPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("supportPageController",supportPageController),supportPageController.$inject=["$scope","$log"],angular.module("awesweet").controller("teamChecklistsPageController",teamChecklistsPageController),teamChecklistsPageController.$inject=["$scope","$log","$routeParams","dataService"],angular.module("awesweet").controller("teamPageController",teamPageController),teamPageController.$inject=["$scope","$log","$location","dataService"],angular.module("awesweet").controller("teamDashPageController",teamDashPageController),teamDashPageController.$inject=["$scope","$log","$location","$routeParams","firebaseService"],angular.module("awesweet").controller("teamSalesSummaryPageController",teamSalesSummaryPageController),teamSalesSummaryPageController.$inject=["$scope","$log"],angular.module("awesweet").factory("dataProcessService",dataProcessService),dataProcessService.$inject=["$log"],angular.module("awesweet").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("awesweet").factory("firebaseService",firebaseService),firebaseService.$inject=["$log","$http","$firebase","$firebaseObject","$firebaseArray"],angular.module("awesweet").directive("barChartDirective",barChartDirective),angular.module("awesweet").directive("footerDirective",footerDirective),angular.module("awesweet").directive("landingChannelsBannerDirective",landingChannelsBannerDirective),angular.module("awesweet").directive("landingHeroBannerDirective",landingHeroBannerDirective),angular.module("awesweet").directive("landingReviewsSliderDirective",landingReviewsSliderDirective),angular.module("awesweet").directive("lineChartDirective",lineChartDirective),angular.module("awesweet").directive("navbarDirective",navbarDirective),angular.module("awesweet").directive("templateProductDirective",templateProductDirective),angular.module("awesweet").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvd2ViYXBwLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9DTUUtcmVjYXAtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWRtaW4tZm9yZWNhc3QtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvYWRtaW5JbnZScHQtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FydC1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jaGFubmVscy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9jaGVja291dC1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9kYXNoYm9hcmQtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvZGF0YVZpZXdzQ29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvaW5zdGFuY2VEYXRhQ29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvaW52ZW50b3J5LWluc3RhbmNlLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2pvYnMtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvbGFuZGluZy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sb2dpbi1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9wcmljaW5nLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3Byb2R1Y3RzLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3Jldmlld3MtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvc3RvcnktY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvc3VwcG9ydC1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy90ZWFtLWNoZWNrbGlzdHMtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvdGVhbS1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy90ZWFtLWRhc2gtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvdGVhbS1zYWxlcy1zdW1tYXJ5LWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9kYXRhLXByb2Nlc3Mtc2VydmljZS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL2RhdGEtc2VydmljZS5qcyIsInNjcmlwdHMvZmFjdG9yaWVzL2ZpcmViYXNlLXNlcnZpY2UuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvYmFyQ2hhcnQtZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2Zvb3Rlci1kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbGFuZGluZ0NoYW5uZWxzQmFubmVyLWRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sYW5kaW5nSGVyb0Jhbm5lci1kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbGFuZGluZ1Jldmlld3NTbGlkZXItZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xpbmVDaGFydC1kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbmF2YmFyLWRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy90ZW1wbGF0ZVByb2R1Y3QtZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyJdLCJuYW1lcyI6WyJhd2Vzd2VldCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJDTUVSZWNhcENvbnRyb2xsZXIiLCIkc2NvcGUiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiZmlyZWJhc2VTZXJ2aWNlIiwiJGZpcmViYXNlT2JqZWN0IiwiaW52ZW50b3J5SW5zdGFuY2VBY2N0c0xpc3QiLCJkYXRhUHJvY2Vzc1NlcnZpY2UiLCJ2bSIsInRoaXMiLCJhY2N0cyIsInB1bGxDbGFzcyIsImRhdGEiLCJhY2N0Q2xhc3MiLCJyZXR1cm5WYWx1ZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiY2xhc3MiLCJiYWxhbmNlIiwicHJvY2Vzc0xpbmVBY2N0cyIsImxpbmVEYXRhIiwiZnJvbUFjY3RUeHMiLCJpbmZvIiwiYWRtaW5Gb3JlY2FzdENvbnRyb2xsZXIiLCIkbG9jYXRpb24iLCJ5ZWFyIiwid2VlayIsInN0YXJ0IiwiY2FsU3RhcnQiLCJtb21lbnQiLCJEYXRlIiwiYWRkaXRpb25hbFdlZWtzIiwicGFyc2VJbnQiLCJzdGFydE1vbmRheSIsImFkZCIsImNvbnNvbGUiLCJsb2ciLCJmb3JtYXQiLCJ3ZWVrU3RhcnQiLCJlbmQiLCJpbmZsb3dzIiwidGVzdGluZyIsIm91dGZsb3dzIiwiY2hhbmdlV2VlayIsImN1cnJlbnRXZWVrIiwiY2hhbmdlIiwibmV3V2VlayIsInBhdGgiLCJhZG1pbkludlJwdENvbnRyb2xsZXIiLCJjYXJ0UGFnZUNvbnRyb2xsZXIiLCIkdWliTW9kYWwiLCIkZG9jdW1lbnQiLCJpdGVtcyIsImFuaW1hdGlvbnNFbmFibGVkIiwib3BlbiIsInNpemUiLCJwYXJlbnRTZWxlY3RvciIsInBhcmVudEVsZW0iLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInVuZGVmaW5lZCIsImFuaW1hdGlvbiIsImFyaWFMYWJlbGxlZEJ5IiwiYXJpYURlc2NyaWJlZEJ5IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiYXBwZW5kVG8iLCJyZXNvbHZlIiwicmVzdWx0IiwidGhlbiIsInNlbGVjdGVkSXRlbSIsInNlbGVjdGVkIiwib3BlbkNvbXBvbmVudE1vZGFsIiwiY29tcG9uZW50IiwiTW9kYWxJbnN0YW5jZUN0cmwiLCIkdWliTW9kYWxJbnN0YW5jZSIsIml0ZW0iLCJvayIsImNsb3NlIiwiY2FuY2VsIiwiZGlzbWlzcyIsImNoYW5uZWxzUGFnZUNvbnRyb2xsZXIiLCJjaGVja291dFBhZ2VDb250cm9sbGVyIiwiZGFzaGJvYXJkUGFnZUNvbnRyb2xsZXIiLCJkYXRhVmlld3NDb250cm9sbGVyIiwiJGh0dHAiLCJ2aWV3IiwiJCRwYXRoIiwic3BsaXQiLCJzZWFzb25JbnB1dCIsImluc3RhbmNlc0lucHV0IiwiYUNoYW5uZWwiLCJuZXdTZWFzb24iLCJpZCIsInRpdGxlIiwic2Vhc29uU3RhcnQiLCJzZWFzb25zRW5kIiwiaXRGcmVxdWVuY3kiLCJpdE9wZW5zIiwiaHIiLCJtaW4iLCJBUCIsInRpbWUiLCJpdENsb3NlcyIsIm5ld0luc3RhbmNlc1ByZXZpZXciLCJsb2FkQ2hhbm5lbCIsIm5hdlByZXZpb3VzIiwiY2hhbm5lbHNMaXN0IiwiaSIsImluZGV4IiwicGF0aEluZGV4IiwiY2hhbm5lbHMiLCJwdXNoIiwiY2hhbm5lbElkIiwibmF2TmV4dCIsImxlbmd0aCIsInNhdmVOZXdTZWFzb24iLCJuYW1lIiwiY3JlYXRlIiwic2Vhc29uIiwicyIsImFsZXJ0IiwiY2F0Y2giLCJlIiwicHJldmlld0l0ZXJhdGlvbnMiLCJmcmVxIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIml0ZXJhdGlvbnMiLCJkaWZmIiwiY3Vyc29yRGF0ZSIsImluc3RhbmNlIiwiY2hhbm5lbCIsImNoYW5uZWxfaWQiLCJjaGFubmVsRGF0YSIsImNoYW5uZWxfbmFtZSIsInNlYXNvbklkIiwiZGF0ZSIsInNldEl0VGltZXMiLCJhcCIsInNhdmVTZWFzb25JZCIsInZhbHVlIiwic2Vhc29ucyIsImRlbEl0UHJldmlldyIsInNwbGljZSIsInNhdmVJdGVyYXRpb25zIiwiYXJyYXkiLCJtZXRob2QiLCJ1cmwiLCJpbnN0YW5jZVJlcm91dGUiLCJyZWFkIiwiaW5zdGFuY2VzIiwiaW5zdGFuY2VzTGlzdCIsIiRhcHBseSIsImVycm9yIiwicXVlcnkiLCJpbnN0YW5jZURhdGFWaWV3c0NvbnRyb2xsZXIiLCJpbnZlbnRvcnlJbnN0YW5jZVBhZ2VDb250cm9sbGVyIiwiam9ic1BhZ2VDb250cm9sbGVyIiwibGFuZGluZ1BhZ2VDb250cm9sbGVyIiwibG9naW5QYWdlQ29udHJvbGxlciIsInN1Ym1pdCIsImF1dGhlbnRpY2F0ZSIsImVtYWlsIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVzZXIiLCJ1aWQiLCJwcmljaW5nUGFnZUNvbnRyb2xsZXIiLCJwcm9kdWN0UGFnZUNvbnRyb2xsZXIiLCJyZXZpZXdzUGFnZUNvbnRyb2xsZXIiLCJzdG9yeVBhZ2VDb250cm9sbGVyIiwic3VwcG9ydFBhZ2VDb250cm9sbGVyIiwidGVhbUNoZWNrbGlzdHNQYWdlQ29udHJvbGxlciIsImRhdGFTZXJ2aWNlIiwibGlzdFR5cGUiLCJ0eXBlIiwibGlzdCIsIkdFVGFDaGVja2xpc3QiLCJsaXN0SWQiLCJ0ZWFtUGFnZUNvbnRyb2xsZXIiLCJhY3RpdmVDaGVja2xpc3RzIiwiR0VUYWxsQ2hlY2tsaXN0cyIsImxpc3RDbGlja2VkIiwidGVhbURhc2hQYWdlQ29udHJvbGxlciIsInVzZXJJZCIsImludmVudG9yeUluc3RhbmNlcyIsImxvYWRJbnN0YW5jZSIsImluc3RhbmNlSWQiLCJ0ZWFtU2FsZXNTdW1tYXJ5UGFnZUNvbnRyb2xsZXIiLCJyZXR1cm5Db2xsZWN0aW9uIiwic3RhcnRWYWx1ZSIsIngiLCJ5IiwidHhzIiwiYVBvaW50IiwiYmFsYW5jZV9jaGFuZ2UiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJhc3NpZ25lZFRvIiwic3FJZCIsImNvbXBsZXRlZCIsImNvbXBsZXRlZERhdGUiLCJjcmVhdGVkRGF0ZSIsImVxdWlwbWVudCIsIjEweDEwQ1BDYW5vcHkiLCJjb25maXJtZWQiLCJjb25maXJtZWRBdCIsImNvbmZpcm1lZEJ5IiwiZGlzY3JpcHRpb24iLCJuZWVkZWQiLCJIb25kYTIyMDBpIiwiTWFuZGVscHJvZmlNaW5pIiwiY2Fub3B5V2VpZ2h0cyIsImNhc2hCb3giLCJjbGVhbmluZ0JveCIsImNvb2tpbmdCb3giLCJlbGVjdHJvbmljc0JveCIsImZpbGVCb3giLCJnYWxXYXRlckp1Z3MiLCJoYW5kd2FzaFN0YXRpb24iLCJwYWNrYWdpbmdCb3giLCJwbGF0dGVyczIwb3oiLCJzY29vcGluZ0JpbnNCb3giLCJzdGluZ2VyU3RhbmRhcmQiLCJ0YWJsZVJpc2VycyIsInRhYmxlcyIsIndhbGxzQmFnQ1AiLCJraXQiLCJyYXdNYXRlcmlhbHMiLCJleHRyYUxpcXVpZHMiLCJjYXJhZmVEUjZjIiwicXR5Iiwic3FySWQiLCJjYXJhZmVTUjZjIiwibnV0cyIsImZ1bGxQZWNhbnMiLCJhbGxvY2F0ZWQiLCJjb2xsZWN0ZWQiLCJkaWZmZXJlbmNlIiwiY29tcGxldGVkQnkiLCJjb21wbGV0ZWRBdCIsImZ1bGxBbG1vbmRzIiwiZnVsbENhc2hld3MiLCJmdWxsUGVhbnV0cyIsImZ1bGxIYXplbG51dHMiLCJoYWxmUGVjYW5zIiwiaGFsZkFsbW9uZHMiLCJoYWxmSGF6ZWxudXRzIiwicmV0dXJuRGF0ZSIsInNoaXBEYXRlIiwiLUxkQ2dVTnR6X1JVX2E0b1FTVmEiLCJkdWVEYXRlIiwiZm9yIiwic29tZXRoaW5nRWxzZSIsIkdFVHByb2R1Y3REYXRhIiwic3VidGl0bGUiLCJwcm9kdWNlciIsInZhcmlhdGlvbnMiLCJlYzRlYjVlMC00NTEyLTExZTktYWNiOC1kNWMxZTgwN2IxYjEiLCJwcmljZSIsInVuaXQiLCJ3ZWlnaHQiLCI3Yzk5YTUxMC00NTEzLTExZTktODBhMy0yZDQ4OGFlOTUxOTMiLCI4MGNlOWMzMC00NTEzLTExZTktYmQyMi1iYjg1YWQzMmE5OTAiLCI4NGMzMmVmMC00NTEzLTExZTktOTNiNS05MTE2NWUzNWE1ZTkiLCI4OTI2ZDczMC00NTEzLTExZTktOGI4OS04ZjdhMTllOTc3NmEiLCI4ZGUzZWExMC00NTEzLTExZTktODMzNy1kNzU1YzBjMThlNDAiLCJkZWZhdWx0VmFyaWF0aW9uIiwic3VnZ2VzdGlvbnMiLCJydGUiLCJjZXJ0aWZpY2F0aW9ucyIsIjAxIiwiMDIiLCIwMyIsImJyYW5kTG9nb1VybCIsInByb2R1Y3RTaG90VXJscyIsInByb2R1Y3RTaG90QXJyYXkiLCJwcm9kdWN0VGh1bWJzVXJscyIsIiRmaXJlYmFzZSIsIiRmaXJlYmFzZUFycmF5IiwicXVlcnlJbnN0YW5jZUFjY3RzIiwiZmlyZWJhc2UiLCJkYXRhYmFzZSIsInJlZiIsIm9yZGVyQnlDaGlsZCIsImVxdWFsVG8iLCJvbmNlIiwic25hcHNob3QiLCJ2YWwiLCJlbWFpbFVzZXIiLCJhdXRoIiwiY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkIiwiY2hJZCIsInNlYXNvbk9iamVjdCIsIm5ld1NlYXNvbktleSIsImNoaWxkIiwibmV3Q2hTZWFzb25LZXkiLCJ1cGRhdGVzIiwidXBkYXRlIiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJpbnN0YW5jZUFjY3RzIiwiYmFyQ2hhcnREaXJlY3RpdmUiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcGxhY2UiLCJzY29wZSIsImxpbmsiLCJsaW5rRnVuYyIsImJhckNoYXJ0RGlyZWN0aXZlQ29udHJvbGxlciIsImJpbmRUb0NvbnRyb2xsZXIiLCJlbCIsImF0dHIiLCJjdHJsIiwiZmxhdm9ycyIsIiRpbmplY3QiLCJmb290ZXJEaXJlY3RpdmUiLCJmb290ZXJEaXJlY3RpdmVDb250cm9sbGVyIiwibGFuZGluZ0NoYW5uZWxzQmFubmVyRGlyZWN0aXZlIiwibGFuZGluZ0NoYW5uZWxzQmFubmVyRGlyZWN0aXZlQ29udHJvbGxlciIsImxhbmRpbmdIZXJvQmFubmVyRGlyZWN0aXZlIiwibGFuZGluZ0hlcm9CYW5uZXJEaXJlY3RpdmVDb250cm9sbGVyIiwibGFuZGluZ1Jldmlld3NTbGlkZXJEaXJlY3RpdmUiLCJsYW5kaW5nUmV2aWV3c1NsaWRlckRpcmVjdGl2ZUNvbnRyb2xsZXIiLCJsaW5lQ2hhcnREaXJlY3RpdmUiLCJsaW5lQ2hhcnREaXJlY3RpdmVDb250cm9sbGVyIiwibGFiZWxzIiwibGV2ZWxzIiwibmF2YmFyRGlyZWN0aXZlIiwibmF2YmFyRGlyZWN0aXZlQ29udHJvbGxlciIsImlzTmF2Q29sbGFwc2VkIiwiaXNDb2xsYXBzZWQiLCJpc0NvbGxhcHNlZEhvcml6b250YWwiLCJ0ZW1wbGF0ZVByb2R1Y3REaXJlY3RpdmUiLCJ0ZW1wbGF0ZVByb2R1Y3REaXJlY3RpdmVDb250cm9sbGVyIiwiY3VyckluZGV4IiwicHJvZHVjdE1vZGVsIiwicHJvZHVjdElkIiwic2VsZWN0ZWRWYXJpYW50Iiwic2xpZGVzIiwiaW1hZ2UiLCJ0ZXh0IiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImhhc2hQcmVmaXgiLCJ3aGVuIiwiJHJvdXRlIiwiY3VycmVudCIsInBhcmFtcyIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJmYWN0b3J5Il0sIm1hcHBpbmdzIjoic0RBRUEsSUFBQUEsU0FBQUMsUUFBQUMsT0FBQSxXQUFBLENBQUEsVUFBQSxhQUFBLGVBQUEsV0FBQSxhQ0tBLFNBQUFDLG1CQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFDLEVBQUFDLEtBQ0FELEVBQUFFLE1BQUFKLEVBR0FFLEVBQUFHLFVBQUEsU0FBQUMsRUFBQUMsR0FFQSxJQUFBQyxFQUFBLEdBT0EsT0FKQUMsT0FBQUMsS0FBQUosR0FBQUssUUFBQSxTQUFBQyxHQUNBTixFQUFBTSxHQUFBQyxPQUFBTixJQUFBQyxFQUFBRixFQUFBTSxHQUFBRSxXQUdBTixHQUVBTixFQUFBYSxpQkFBQSxTQUFBVCxHQUNBLE9BQUFMLEVBQUFlLFNBQUFDLFlBQUFYLElBR0FWLEVBQUFzQixLQUFBLHFDQUFBckIsRUFBQUcsR0N0QkEsU0FBQW1CLHdCQUFBeEIsRUFBQUMsRUFBQUMsRUFBQXVCLEdBR0EsSUFBQWxCLEVBQUFDLEtBR0FELEVBQUFtQixLQUFBeEIsRUFBQXdCLEtBQ0FuQixFQUFBb0IsS0FBQXpCLEVBQUF5QixLQUNBcEIsRUFBQXFCLE1Ba0JBLFNBQUFGLEVBQUFDLEdBRUEsSUFBQUUsRUFBQUMsT0FBQSxJQUFBQyxLQUFBLEtBQUEsR0FBQSxLQUNBQyxFQUFBLEVBR0FBLEVBQUEsS0FBQU4sRUFBQU0sRUFBQSxJQUFBTixFQUFBLE1BQUEsRUFBQU8sU0FBQU4sR0FD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QUEsZUNKQWpVLFFBQ0FDLE9BQUEsWUFDQW9FLFdBQUEscUJBQUFvSCxvQkFFQUEsbUJBQUF3SSxRQUFBLENBQUEsU0FBQSxPQUFBLFlBQUEsZUNKQWpVLFFBQ0FDLE9BQUEsWUFDQW9FLFdBQUEseUJBQUF3SCx3QkFFQUEsdUJBQUFvSSxRQUFBLENBQUEsU0FBQSxPQUFBLFlBQUEsZUFBQSxtQkNKQWpVLFFBQ0FDLE9BQUEsWUFDQW9FLFdBQUEsaUNBQUE2SCxnQ0FFQUEsK0JBQUErSCxRQUFBLENBQUEsU0FBQSxRQ0dBalUsUUFDQUMsT0FBQSxZQUNBcVcsUUFBQSxxQkFBQTdWLG9CQUdBQSxtQkFBQXdULFFBQUEsQ0FBQSxRQ05BalUsUUFDQUMsT0FBQSxZQUNBcVcsUUFBQSxjQUFBbkwsYUFHQUEsWUFBQThJLFFBQUEsQ0FBQSxTQ0xBalUsUUFDQUMsT0FBQSxZQUNBcVcsUUFBQSxrQkFBQWhXLGlCQUdBQSxnQkFBQTJULFFBQUEsQ0FBQSxPQUFBLFFBQUEsWUFBQSxrQkFBQSxrQkNMQWpVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEsb0JBQUFELG1CQ0ZBcFQsUUFDQUMsT0FBQSxZQUNBb1QsVUFBQSxrQkFBQWEsaUJDRkFsVSxRQUNBQyxPQUFBLFlBQ0FvVCxVQUFBLGlDQUFBZSxnQ0NGQXBVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEsNkJBQUFpQiw0QkNGQXRVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEsZ0NBQUFtQiwrQkNGQXhVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEscUJBQUFxQixvQkNGQTFVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEsa0JBQUF5QixpQkNGQTlVLFFBQ0FDLE9BQUEsWUFDQW9ULFVBQUEsMkJBQUE4QiwwQkNIQW5WLFFBQ0FDLE9BQUEsWUFDQTJWLE9BQUFBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gTU9EVUxFXG52YXIgYXdlc3dlZXQgPSBhbmd1bGFyLm1vZHVsZSgnYXdlc3dlZXQnLCBbJ25nUm91dGUnLCAnbmdTYW5pdGl6ZScsICd1aS5ib290c3RyYXAnLCAnZmlyZWJhc2UnLCAnY2hhcnQuanMnXSk7XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdDTUVSZWNhcENvbnRyb2xsZXInLCBDTUVSZWNhcENvbnRyb2xsZXIpO1xuXG5cdENNRVJlY2FwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICdmaXJlYmFzZVNlcnZpY2UnLCBcIiRmaXJlYmFzZU9iamVjdFwiLCAnaW52ZW50b3J5SW5zdGFuY2VBY2N0c0xpc3QnLCAnZGF0YVByb2Nlc3NTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gQ01FUmVjYXBDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCBmaXJlYmFzZVNlcnZpY2UsICRmaXJlYmFzZU9iamVjdCwgaW52ZW50b3J5SW5zdGFuY2VBY2N0c0xpc3QsIGRhdGFQcm9jZXNzU2VydmljZSkge1xuXG5cdC8vICBERUZJTkUgVklFVyBNT0RFTCBWQVJJQUJMRVNcbiAgdmFyIHZtID0gdGhpcztcbiAgdm0uYWNjdHMgPSBpbnZlbnRvcnlJbnN0YW5jZUFjY3RzTGlzdDtcblxuICAvLyAgVklFVyBNT0RFTCBGTkNUSU9OU1xuICB2bS5wdWxsQ2xhc3MgPSBmdW5jdGlvbihkYXRhLCBhY2N0Q2xhc3MpIHtcbiAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklBQkxFU1xuICAgIHZhciByZXR1cm5WYWx1ZSA9ICcnO1xuXG4gICAgLy8gIElURVJBVEUgT1ZFUiBBTEwgREFUQVxuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZihkYXRhW2tleV0uY2xhc3MgPT0gYWNjdENsYXNzKSByZXR1cm5WYWx1ZSA9IGRhdGFba2V5XS5iYWxhbmNlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9O1xuICB2bS5wcm9jZXNzTGluZUFjY3RzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiBkYXRhUHJvY2Vzc1NlcnZpY2UubGluZURhdGEuZnJvbUFjY3RUeHMoZGF0YSlcbiAgfTtcblxuICAkbG9nLmluZm8oJ2luIHRoZSBjaGVja291dCBDTUVSZWNhcENvbnRyb2xsZXInLCAkcm91dGVQYXJhbXMsIGludmVudG9yeUluc3RhbmNlQWNjdHNMaXN0KTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdhZG1pbkZvcmVjYXN0Q29udHJvbGxlcicsIGFkbWluRm9yZWNhc3RDb250cm9sbGVyKTtcblxuXHRhZG1pbkZvcmVjYXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhZG1pbkZvcmVjYXN0Q29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgXG4gICAgLy8gIERFRklORSBWSUVXIE1PREVMXG4gICAgdm0ueWVhciA9ICRyb3V0ZVBhcmFtcy55ZWFyO1xuICAgIHZtLndlZWsgPSAkcm91dGVQYXJhbXMud2VlaztcbiAgICB2bS5zdGFydCA9IHdlZWtTdGFydCh2bS55ZWFyLCB2bS53ZWVrKTtcbiAgICB2bS5lbmQgPSBtb21lbnQodm0uc3RhcnQpLmFkZCg2LCAnZCcpLmZvcm1hdCgpO1xuICAgIHZtLmluZmxvd3MgPSBbXG4gICAgICAgIHt0ZXN0aW5nOlwiZmlyZXN0IHRlc3RcIn1cbiAgICBdO1xuICAgIHZtLm91dGZsb3dzID0gW1xuICAgICAgICB7dGVzdGluZzpcImZpcmVzdCB0ZXN0XCJ9XG4gICAgXTtcblxuICAgIC8vICBWSUVXIE1PREVMIEZVTkNUSU9OU1xuICAgIHZtLmNoYW5nZVdlZWsgPWZ1bmN0aW9uKGN1cnJlbnRXZWVrLCBjaGFuZ2UpIHtcbiAgICAgICAgdmFyIG5ld1dlZWsgPSBwYXJzZUludChjdXJyZW50V2VlaykgKyBwYXJzZUludChjaGFuZ2UpO1xuICAgICAgICBjb25zb2xlLmxvZygnbmV3IHdlZWsnLCBuZXdXZWVrKTtcbiAgICAgICAgaWYobmV3V2VlayA8IDUzICYmIG5ld1dlZWsgPiAwKSAkbG9jYXRpb24ucGF0aCgnYWRtaW4vZm9yZWNhc3RzL3dlZWtseS8nICsgdm0ueWVhciArICcvJysgbmV3V2VlaylcbiAgICAgICAgZWxzZSBjb25zb2xlLmxvZygncHJvYmxlbScpO1xuICAgIH07XG5cbiAgICAvLyAgTE9DQUwgRlVOQ1RJT05TXG4gICAgZnVuY3Rpb24gd2Vla1N0YXJ0KHllYXIsIHdlZWspIHtcbiAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgdmFyIGNhbFN0YXJ0ID0gbW9tZW50KG5ldyBEYXRlKDIwMTgsMTEsMzEpKTtcbiAgICAgICAgdmFyIGFkZGl0aW9uYWxXZWVrcyA9IDA7XG5cbiAgICAgICAgLy8gIENBTENVTEFURSBBRERJVElPTkFMIFdFRUtTXG4gICAgICAgIGlmKHllYXIgPiAyMDE5KSBhZGRpdGlvbmFsV2Vla3MgPSBhZGRpdGlvbmFsV2Vla3MgKyAoKHllYXIgLSAyMDE5KSAqIDUyKSAtIDEgKyBwYXJzZUludCh3ZWVrKVxuICAgICAgICBlbHNlIGFkZGl0aW9uYWxXZWVrcyA9IGFkZGl0aW9uYWxXZWVrcyAtIDEgKyBwYXJzZUludCh3ZWVrKTtcblxuICAgICAgICAvLyAgQUREIEFERElUSU9OQUwgV0VFS1NcbiAgICAgICAgdmFyIHN0YXJ0TW9uZGF5ID0gY2FsU3RhcnQuYWRkKGFkZGl0aW9uYWxXZWVrcywgJ3cnKTtcblxuICAgICAgICAvLyAgTk9USUZZIFBST0dSRVNTXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYWRkaW5nXCIsIGFkZGl0aW9uYWxXZWVrcywgXCJ3ZWVrc1wiLCBzdGFydE1vbmRheS5mb3JtYXQoKSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXJ0TW9uZGF5LmZvcm1hdCgpO1xuICAgIH07XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgYWRtaW5Gb3JlY2FzdENvbnRyb2xsZXInLCAkcm91dGVQYXJhbXMsIHZtLnN0YXJ0KTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdhZG1pbkludlJwdENvbnRyb2xsZXInLCBhZG1pbkludlJwdENvbnRyb2xsZXIpO1xuXG5cdGFkbWluSW52UnB0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWRtaW5JbnZScHRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBpbnZlbnRvcnkgcmVwcnRzIGNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdjYXJ0UGFnZUNvbnRyb2xsZXInLCBjYXJ0UGFnZUNvbnRyb2xsZXIpO1xuXG5cdGNhcnRQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckdWliTW9kYWwnLCckbG9nJywgJyRkb2N1bWVudCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNhcnRQYWdlQ29udHJvbGxlcigkdWliTW9kYWwsICRsb2csICRkb2N1bWVudCkge1xuXG5cdC8vXHRERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9cdERFRklORSBWSUVXIE1PREVMIFZBUklBQkxFU1xuXHR2bS5pdGVtcyA9IFsnaXRlbTEnLCAnaXRlbTInLCAnaXRlbTMnXTtcblx0dm0uYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuXHR2bS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIHBhcmVudFNlbGVjdG9yKSB7XG5cdFx0dmFyIHBhcmVudEVsZW0gPSBwYXJlbnRTZWxlY3RvciA/IFxuXHRcdCAgYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5xdWVyeVNlbGVjdG9yKCcubW9kYWwtZGVtbyAnICsgcGFyZW50U2VsZWN0b3IpKSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0XHQgIGFuaW1hdGlvbjogdm0uYW5pbWF0aW9uc0VuYWJsZWQsXG5cdFx0ICBhcmlhTGFiZWxsZWRCeTogJ21vZGFsLXRpdGxlJyxcblx0XHQgIGFyaWFEZXNjcmliZWRCeTogJ21vZGFsLWJvZHknLFxuXHRcdCAgdGVtcGxhdGVVcmw6ICdteU1vZGFsQ29udGVudC5odG1sJyxcblx0XHQgIGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXG5cdFx0ICBjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0ICBzaXplOiBzaXplLFxuXHRcdCAgYXBwZW5kVG86IHBhcmVudEVsZW0sXG5cdFx0ICByZXNvbHZlOiB7XG5cdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xuXHRcdFx0ICByZXR1cm4gdm0uaXRlbXM7XG5cdFx0XHR9XG5cdFx0ICB9XG5cdFx0fSk7XG5cblx0XHRtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcblx0XHRcdHZtLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuXHRcdCAgfSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcblx0XHQgIH0pO1xuXHR9O1xuXG5cdHZtLm9wZW5Db21wb25lbnRNb2RhbCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0XHQgIGFuaW1hdGlvbjogdm0uYW5pbWF0aW9uc0VuYWJsZWQsXG5cdFx0ICBjb21wb25lbnQ6ICdtb2RhbENvbXBvbmVudCcsXG5cdFx0ICByZXNvbHZlOiB7XG5cdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xuXHRcdFx0ICByZXR1cm4gdm0uaXRlbXM7XG5cdFx0XHR9XG5cdFx0ICB9XG5cdFx0fSk7XG5cdFxuXHRcdG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuXHRcdCAgdm0uc2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW07XG5cdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdCAgJGxvZy5pbmZvKCdtb2RhbC1jb21wb25lbnQgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG5cdFx0fSk7XG5cdH07XG5cblxuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGNhcnQgY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0ub3BlbignbGcnKTtcbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignTW9kYWxJbnN0YW5jZUN0cmwnLCBNb2RhbEluc3RhbmNlQ3RybCk7XG5cblx0TW9kYWxJbnN0YW5jZUN0cmwuJGluamVjdCA9IFsnJHVpYk1vZGFsSW5zdGFuY2UnLCdpdGVtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIE1vZGFsSW5zdGFuY2VDdHJsKCR1aWJNb2RhbEluc3RhbmNlLCBpdGVtcykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5pdGVtcyA9IGl0ZW1zO1xuXHR2bS5zZWxlY3RlZCA9IHtcblx0ICBpdGVtOiB2bS5pdGVtc1swXVxuXHR9O1xuICBcblx0dm0ub2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uodm0uc2VsZWN0ZWQuaXRlbSk7XG5cdH07XG4gIFxuXHR2bS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG5cdCAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG5cdH07XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignY2hhbm5lbHNQYWdlQ29udHJvbGxlcicsIGNoYW5uZWxzUGFnZUNvbnRyb2xsZXIpO1xuXG5cdGNoYW5uZWxzUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoYW5uZWxzUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGNoYW5uZWxzIGNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdjaGVja291dFBhZ2VDb250cm9sbGVyJywgY2hlY2tvdXRQYWdlQ29udHJvbGxlcik7XG5cblx0Y2hlY2tvdXRQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNoZWNrb3V0UGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgY2hlY2tvdXQgY29udHJvbGxlcicsICRyb3V0ZVBhcmFtcyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignZGFzaGJvYXJkUGFnZUNvbnRyb2xsZXInLCBkYXNoYm9hcmRQYWdlQ29udHJvbGxlcik7XG5cblx0ZGFzaGJvYXJkUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGRhc2hib2FyZFBhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBkYXNoYm9hcmQgY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmNvbnRyb2xsZXIoJ2RhdGFWaWV3c0NvbnRyb2xsZXInLCBkYXRhVmlld3NDb250cm9sbGVyKTtcblxuXHRkYXRhVmlld3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJGxvY2F0aW9uJywgXCIkcm91dGVQYXJhbXNcIiwgJ2ZpcmViYXNlU2VydmljZScsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGRhdGFWaWV3c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgZmlyZWJhc2VTZXJ2aWNlLCAkaHR0cCkge1xuXG4gICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICB2YXIgdmlldyA9ICRsb2NhdGlvbi4kJHBhdGguc3BsaXQoJy8nKVszXTtcbiAgICBcbiAgICAvLyAgREVGSU5FIFZJRVdNT0RFTCBWQVJJQUJMRVNcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnNlYXNvbklucHV0ID0gZmFsc2U7XG4gICAgdm0uaW5zdGFuY2VzSW5wdXQgPSBmYWxzZTtcbiAgICB2bS5hQ2hhbm5lbCA9IHtcbiAgICAgICAgbmV3U2Vhc29uOiB7IGlkOiBcIlwiLCB0aXRsZTogXCJcIiB9LFxuICAgICAgICBzZWFzb25TdGFydDogXCJcIixcbiAgICAgICAgc2Vhc29uc0VuZDogXCJcIixcbiAgICAgICAgaXRGcmVxdWVuY3k6IFwiXCIsXG4gICAgICAgIGl0T3BlbnM6IHsgaHI6IFwiXCIsIG1pbjogXCJcIiwgQVA6IFwiXCIsIHRpbWU6IFwiXCJ9LFxuICAgICAgICBpdENsb3NlczogeyBocjogXCJcIiwgbWluOiBcIlwiLCBBUDogXCJcIiwgdGltZTogXCJcIn0sXG4gICAgICAgIG5ld0luc3RhbmNlc1ByZXZpZXc6IFtdXG4gICAgfVxuXG4gICAgLy8gIERFRklORSBWSUVXIE1PREVMIEZVTkNUSU9OU1xuICAgIHZtLmxvYWRDaGFubmVsID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hZG1pbi9kYXRhL2NoYW5uZWwvJyArIGlkKTtcbiAgICB9O1xuICAgIHZtLm5hdlByZXZpb3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIHZhciBjaGFubmVsc0xpc3QgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgcGF0aEluZGV4ID0gMDtcbiAgICAgICAgLy8gIGl0ZXJhdGUgb3ZlciBjaGFubmVscyBsaXN0XG4gICAgICAgIE9iamVjdC5rZXlzKHZtLmNoYW5uZWxzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgY2hhbm5lbHNMaXN0LnB1c2godm0uY2hhbm5lbHNba2V5XSk7XG4gICAgICAgICAgICBpZihrZXkgPT0gJHJvdXRlUGFyYW1zLmNoYW5uZWxJZCkgaW5kZXggPSBpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhrZXkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoKGluZGV4IC0gMSkgPiAwKSBwYXRoSW5kZXggPSBpbmRleCAtIDE7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZygnbmF2IHRvIHByZXZpb3VzJywgaW5kZXgsIHBhdGhJbmRleCwgY2hhbm5lbHNMaXN0W3BhdGhJbmRleF0uaWQpO1xuICAgICAgICBcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hZG1pbi9kYXRhL2NoYW5uZWwvJyArIGNoYW5uZWxzTGlzdFtwYXRoSW5kZXhdLmlkKVxuICAgIH07XG4gICAgdm0ubmF2TmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklBQkxFU1xuICAgICAgICB2YXIgY2hhbm5lbHNMaXN0ID0gW107XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIHBhdGhJbmRleCA9IDA7XG4gICAgICAgIC8vICBpdGVyYXRlIG92ZXIgY2hhbm5lbHMgbGlzdFxuICAgICAgICBPYmplY3Qua2V5cyh2bS5jaGFubmVscykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGNoYW5uZWxzTGlzdC5wdXNoKHZtLmNoYW5uZWxzW2tleV0pO1xuICAgICAgICAgICAgaWYoa2V5ID09ICRyb3V0ZVBhcmFtcy5jaGFubmVsSWQpIGluZGV4ID0gaTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coa2V5KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKChpbmRleCArIDEpIDwgY2hhbm5lbHNMaXN0Lmxlbmd0aCkgcGF0aEluZGV4ID0gaW5kZXggKyAxO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ25hdiB0byBuZXh0JywgaW5kZXgsIHBhdGhJbmRleCwgY2hhbm5lbHNMaXN0W3BhdGhJbmRleF0uaWQpO1xuICAgICAgICBcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hZG1pbi9kYXRhL2NoYW5uZWwvJyArIGNoYW5uZWxzTGlzdFtwYXRoSW5kZXhdLmlkKVxuICAgIH07XG4gICAgdm0uc2F2ZU5ld1NlYXNvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgY29uc29sZS5sb2coJ3NhdmluZyBzZWFzb25zOiAnLCBuYW1lKTtcbiAgICAgICAgZmlyZWJhc2VTZXJ2aWNlLmNyZWF0ZS5zZWFzb24oJHJvdXRlUGFyYW1zLmNoYW5uZWxJZCwgbmFtZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICBhbGVydCgnU2F2ZWQgU3VjY2Vzc2Z1bGx5Jywgcyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdFcnJvciBTYXZpbmdzJywgZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdm0ucHJldmlld0l0ZXJhdGlvbnMgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBmcmVxKSB7XG4gICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIHZhciBzdGFydERhdGUgPSBtb21lbnQoc3RhcnQpO1xuICAgICAgICB2YXIgZW5kRGF0ZSA9IG1vbWVudChlbmQpO1xuICAgICAgICB2bS5hQ2hhbm5lbC5uZXdJbnN0YW5jZXNQcmV2aWV3ID0gW107XG5cbiAgICAgICAgLy8gIFRFU1QgRk9SIFZJQUJMRSBWQUxVRVNcbiAgICAgICAgaWYoc3RhcnQgIT0gXCJcIiAmJiBlbmQgIT0gXCJcIiwgZnJlcSAhPVwiXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhbGwgdmFsdWVzIGdvb2QnKTtcbiAgICAgICAgICAgIC8vICBpdGVyYXRlIGJhc2VkIG9uIGZyZXF1ZW5jeVxuICAgICAgICAgICAgc3dpdGNoKGZyZXEpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiRGFpbHlcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQkFMRVNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBlbmREYXRlLmRpZmYoc3RhcnREYXRlLCAnZGF5cycpXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JEYXRlID0gc3RhcnREYXRlO1xuICAgICAgICAgICAgICAgICAgICAvLyAgaXRlcmF0ZSB0byBjcmVhdGUgdGhlIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8PSBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2F2ZSB0aGUgZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYUNoYW5uZWwubmV3SW5zdGFuY2VzUHJldmlldy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogeyBjaGFubmVsX2lkOiB2bS5jaGFubmVsRGF0YS5pZCwgY2hhbm5lbF9uYW1lOiB2bS5jaGFubmVsRGF0YS50aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFzb246IHsgc2Vhc29uSWQ6IHZtLmFDaGFubmVsLm5ld1NlYXNvbi5pZCwgdGl0bGU6IHZtLmFDaGFubmVsLm5ld1NlYXNvbi50aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBjdXJzb3JEYXRlLmZvcm1hdCgpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdGlmeSB0aGUgZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjdXJzb3JEYXRlLmZvcm1hdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaW5jcmltZW50IHRoZSBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JEYXRlID0gY3Vyc29yRGF0ZS5hZGQoMSwgJ2RheXMnKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIldlZWtseVwiOlxuICAgICAgICAgICAgICAgICAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklCQUxFU1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGVuZERhdGUuZGlmZihzdGFydERhdGUsICd3ZWVrcycpXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JEYXRlID0gc3RhcnREYXRlO1xuICAgICAgICAgICAgICAgICAgICAvLyAgaXRlcmF0ZSB0byBjcmVhdGUgdGhlIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8PSBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2F2ZSB0aGUgZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYUNoYW5uZWwubmV3SW5zdGFuY2VzUHJldmlldy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogeyBjaGFubmVsX2lkOiB2bS5jaGFubmVsRGF0YS5pZCwgY2hhbm5lbF9uYW1lOiB2bS5jaGFubmVsRGF0YS50aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFzb246IHsgc2Vhc29uSWQ6IHZtLmFDaGFubmVsLm5ld1NlYXNvbi5pZCwgdGl0bGU6IHZtLmFDaGFubmVsLm5ld1NlYXNvbi50aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBjdXJzb3JEYXRlLmZvcm1hdCgpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdGlmeSB0aGUgZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjdXJzb3JEYXRlLmZvcm1hdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaW5jcmltZW50IHRoZSBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JEYXRlID0gY3Vyc29yRGF0ZS5hZGQoMSwgJ3dlZWsnKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQmktV2Vla2x5XCI6XG4gICAgICAgICAgICAgICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUJBTEVTXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gZW5kRGF0ZS5kaWZmKHN0YXJ0RGF0ZSwgJ3dlZWtzJykgLyAyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yRGF0ZSA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gIGl0ZXJhdGUgdG8gY3JlYXRlIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPD0gaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NhdmUgdGhlIGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmFDaGFubmVsLm5ld0luc3RhbmNlc1ByZXZpZXcucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogaSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IHsgY2hhbm5lbF9pZDogdm0uY2hhbm5lbERhdGEuaWQsIGNoYW5uZWxfbmFtZTogdm0uY2hhbm5lbERhdGEudGl0bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vhc29uOiB7IHNlYXNvbklkOiB2bS5hQ2hhbm5lbC5uZXdTZWFzb24uaWQsIHRpdGxlOiB2bS5hQ2hhbm5lbC5uZXdTZWFzb24udGl0bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogY3Vyc29yRGF0ZS5mb3JtYXQoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3RpZnkgdGhlIGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coY3Vyc29yRGF0ZS5mb3JtYXQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2luY3JpbWVudCB0aGUgZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yRGF0ZSA9IGN1cnNvckRhdGUuYWRkKDIsICd3ZWVrJylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIk1vbnRobHlcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQkFMRVNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBlbmREYXRlLmRpZmYoc3RhcnREYXRlLCAnbW9udGhzJylcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvckRhdGUgPSBzdGFydERhdGU7XG4gICAgICAgICAgICAgICAgICAgIC8vICBpdGVyYXRlIHRvIGNyZWF0ZSB0aGUgbGlzdFxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDw9IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zYXZlIHRoZSBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5hQ2hhbm5lbC5uZXdJbnN0YW5jZXNQcmV2aWV3LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IGkgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiB7IGNoYW5uZWxfaWQ6IHZtLmNoYW5uZWxEYXRhLmlkLCBjaGFubmVsX25hbWU6IHZtLmNoYW5uZWxEYXRhLnRpdGxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXNvbjogeyBzZWFzb25JZDogdm0uYUNoYW5uZWwubmV3U2Vhc29uLmlkLCB0aXRsZTogdm0uYUNoYW5uZWwubmV3U2Vhc29uLnRpdGxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGN1cnNvckRhdGUuZm9ybWF0KCkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90aWZ5IHRoZSBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGN1cnNvckRhdGUuZm9ybWF0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9pbmNyaW1lbnQgdGhlIGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvckRhdGUgPSBjdXJzb3JEYXRlLmFkZCgxLCAnbW9udGgnKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdm0uc2V0SXRUaW1lcyA9IGZ1bmN0aW9uKHBhdGgsIGhyLCBtaW4sIGFwKSB7XG4gICAgICAgIC8vICBURVNUIEZPUiBWQUxVRVNcbiAgICAgICAgaWYgKGhyICE9IFwiXCIgJiYgbWluICE9IFwiXCIgJiYgYXAgIT0gXCJcIikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihhcCA9PSBcIlBNXCIpIHtcbiAgICAgICAgICAgICAgICB2bS5hQ2hhbm5lbFtwYXRoXS50aW1lID0gKHBhcnNlSW50KGhyKSArIDEyKSArIFwiOlwiICsgbWluICsgXCItMDc6MDBcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0uYUNoYW5uZWxbcGF0aF0udGltZSA9IGhyICsgXCI6XCIgKyBtaW4gKyBcIi0wNzowMFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAgQWRkIHRvIGFsbCBvZiB0aGUgaW5zdGFuY2VzXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdm0uYUNoYW5uZWwubmV3SW5zdGFuY2VzUHJldmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZtLmFDaGFubmVsLm5ld0luc3RhbmNlc1ByZXZpZXdbaV1bcGF0aF0gPSB2bS5hQ2hhbm5lbFtwYXRoXS50aW1lO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgdGltZScsIHZtLmFDaGFubmVsLml0T3BlbnMudGltZSlcbiAgICB9O1xuICAgIHZtLnNhdmVTZWFzb25JZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIGNvbnNvbGUubG9nKCdnb3QgdGhpcyB2YWx1ZScsIHZhbHVlLCAnbG9va2luZyBhdCB0aGlzIGRhdGEnLCB2bS5jaGFubmVsRGF0YS5zZWFzb25zKTtcbiAgICAgICAgLy8gIElURVJBVEUgT1ZFUiBWQUxVRVNcbiAgICAgICAgT2JqZWN0LmtleXModm0uY2hhbm5lbERhdGEuc2Vhc29ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codm0uY2hhbm5lbERhdGEuc2Vhc29uc1trZXldKTtcbiAgICAgICAgICAgIGlmKHZtLmNoYW5uZWxEYXRhLnNlYXNvbnNba2V5XS50aXRsZSA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vbm90aWZ5IHByb2dyZXNcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZm91bmQgc2Vhc29uIGlkJywgdm0uY2hhbm5lbERhdGEuc2Vhc29uc1trZXldLnNlYXNvbklkKTtcbiAgICAgICAgICAgICAgICB2bS5hQ2hhbm5lbC5uZXdTZWFzb24uaWQgPSB2bS5jaGFubmVsRGF0YS5zZWFzb25zW2tleV0uc2Vhc29uSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyBzZWFzb24gSUQgZm91bmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7IFxuICAgIH07XG4gICAgdm0uZGVsSXRQcmV2aWV3ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgLy8gICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIGNvbnNvbGUubG9nKGluZGV4LCB2bS5hQ2hhbm5lbC5uZXdJbnN0YW5jZXNQcmV2aWV3W2luZGV4XSk7XG4gICAgICAgIHZtLmFDaGFubmVsLm5ld0luc3RhbmNlc1ByZXZpZXcuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICAgIHZtLnNhdmVJdGVyYXRpb25zID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgLy8gIE5PVElGWSBQUk9HUkVTU1xuICAgICAgICBjb25zb2xlLmxvZyhcImdvdCB0aGlzIGFycmF5XCIsIGFycmF5KTtcbiAgICAgICAgLy8gIFJFVFVSTiBSRVNQT05TRVxuICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgdXJsOiBcIi90YXNrL2FkZEluY2lkZW5jZUxpc3RcIixcbiAgICAgICAgICAgIGRhdGE6IGFycmF5XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuICAgICAgICAgICAgLy9yZXR1cm4gYW4gYWZmaXJtYXRpdmUgc3RhdHVzIGNvZGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHMpXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHZtLmluc3RhbmNlUmVyb3V0ZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdnb3QgdGhpcyBpZCcsIGlkKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgLy8gIExPQUQgREFUQVxuICAgIHN3aXRjaCh2aWV3KSB7XG4gICAgICAgIGNhc2UgXCJpbnN0YW5jZXNfYnlfY2hhbm5lbFwiOlxuICAgICAgICAgICAgZmlyZWJhc2VTZXJ2aWNlLnJlYWQuaW5zdGFuY2VzKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MoaW5zdGFuY2VzTGlzdCkge1xuICAgICAgICAgICAgICAgIHZtLmluc3RhbmNlcyA9IGluc3RhbmNlc0xpc3Q7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY2hhbm5lbHNcIjpcbiAgICAgICAgICAgIGZpcmViYXNlU2VydmljZS5yZWFkLmNoYW5uZWxzKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MoY2hhbm5lbHNMaXN0KSB7XG4gICAgICAgICAgICAgICAgdm0uY2hhbm5lbHMgPSBjaGFubmVsc0xpc3Q7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY2hhbm5lbFwiOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJyRyb3V0ZVBhcmFtcycsICRyb3V0ZVBhcmFtcyk7XG4gICAgICAgICAgICBmaXJlYmFzZVNlcnZpY2UucmVhZC5jaGFubmVscygpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKGNoYW5uZWxzTGlzdCkge1xuICAgICAgICAgICAgICAgIHZtLmNoYW5uZWxzID0gY2hhbm5lbHNMaXN0O1xuICAgICAgICAgICAgICAgIHZtLmNoYW5uZWxEYXRhID0gY2hhbm5lbHNMaXN0WyRyb3V0ZVBhcmFtcy5jaGFubmVsSWRdO1xuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmaXJlYmFzZVNlcnZpY2UucXVlcnkuaW5zdGFuY2UoJHJvdXRlUGFyYW1zLmNoYW5uZWxJZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MoaW5zdGFuY2VzTGlzdCkge1xuICAgICAgICAgICAgICAgIHZtLmluc3RhbmNlcyA9IGluc3RhbmNlc0xpc3Q7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICB9XG5cblxuXG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgZGF0YSB2aWV3cyBjb250cm9sbGVyJywgdmlldyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignaW5zdGFuY2VEYXRhVmlld3NDb250cm9sbGVyJywgaW5zdGFuY2VEYXRhVmlld3NDb250cm9sbGVyKTtcblxuXHRpbnN0YW5jZURhdGFWaWV3c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGluc3RhbmNlRGF0YVZpZXdzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgaW5zdGFuY2UgRGF0YSBWaWV3cyBjb250cm9sbGVyJyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignaW52ZW50b3J5SW5zdGFuY2VQYWdlQ29udHJvbGxlcicsIGludmVudG9yeUluc3RhbmNlUGFnZUNvbnRyb2xsZXIpO1xuXG5cdGludmVudG9yeUluc3RhbmNlUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGludmVudG9yeUluc3RhbmNlUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXHQkbG9nLmluZm8oJ2luIHRoZSBpbnZlbnRvcnkgaW5zdGFuY2UgcGFnZSBjb250cm9sbGVyJyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignam9ic1BhZ2VDb250cm9sbGVyJywgam9ic1BhZ2VDb250cm9sbGVyKTtcblxuXHRqb2JzUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGpvYnNQYWdlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgam9icyBjb250cm9sbGVyJyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmRpbmdQYWdlQ29udHJvbGxlcicsIGxhbmRpbmdQYWdlQ29udHJvbGxlcik7XG5cblx0bGFuZGluZ1BhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxhbmRpbmcgY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblxufVxuIiwiXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xvZ2luUGFnZUNvbnRyb2xsZXInLCBsb2dpblBhZ2VDb250cm9sbGVyKTtcblxuXHRsb2dpblBhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJ2ZpcmViYXNlU2VydmljZSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvZ2luUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkaHR0cCwgJGxvY2F0aW9uLCBmaXJlYmFzZVNlcnZpY2UpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgbG9naW4gY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0dm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ3N1Ym1pdHRpbmcgZm9ybScpO1xuXG5cdFx0ZmlyZWJhc2VTZXJ2aWNlLmF1dGhlbnRpY2F0ZS5lbWFpbCh2bS51c2VybmFtZSwgdm0ucGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gc3VjZXNzKHMpIHtcblx0XHRcdC8vXHRPTiBTVUNDRVNTRlVMIExPR0lOIFJFRElSRUNUIERPIFRFQU0gTUVNQkVSIERBU0hCT0FSRFxuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy90ZWFtLycrIHMudXNlci51aWQgKycvZGFzaGJvYXJkJyk7XG5cdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0XHQkbG9nLmluZm8ocylcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0XHQkbG9nLmVycm9yKGUpO1xuXHRcdH0pO1xuXG5cdH1cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdwcmljaW5nUGFnZUNvbnRyb2xsZXInLCBwcmljaW5nUGFnZUNvbnRyb2xsZXIpO1xuXG5cdHByaWNpbmdQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJpY2luZ1BhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBwcmljaW5nIGNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdwcm9kdWN0UGFnZUNvbnRyb2xsZXInLCBwcm9kdWN0UGFnZUNvbnRyb2xsZXIpO1xuXG5cdHByb2R1Y3RQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2R1Y3RQYWdlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcykge1xuXG5cdC8vXHRERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQvL1x0REVGSU5FIFZJRVdNT09ERUwgVkFSSUFCTEVTXG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgcHJvZHVjdHMgY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdFxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcigncmV2aWV3c1BhZ2VDb250cm9sbGVyJywgcmV2aWV3c1BhZ2VDb250cm9sbGVyKTtcblxuXHRyZXZpZXdzUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHJldmlld3NQYWdlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgcmV2aWV3cyBjb250cm9sbGVyJyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcignc3RvcnlQYWdlQ29udHJvbGxlcicsIHN0b3J5UGFnZUNvbnRyb2xsZXIpO1xuXG5cdHN0b3J5UGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0b3J5UGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIHN0b3J5IGNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCdzdXBwb3J0UGFnZUNvbnRyb2xsZXInLCBzdXBwb3J0UGFnZUNvbnRyb2xsZXIpO1xuXG5cdHN1cHBvcnRQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3VwcG9ydFBhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBzdXBwb3J0IGNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCd0ZWFtQ2hlY2tsaXN0c1BhZ2VDb250cm9sbGVyJywgdGVhbUNoZWNrbGlzdHNQYWdlQ29udHJvbGxlcik7XG5cblx0dGVhbUNoZWNrbGlzdHNQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICdkYXRhU2VydmljZSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRlYW1DaGVja2xpc3RzUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsIGRhdGFTZXJ2aWNlKSB7XG5cbiAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklBQkxFU1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAvLyAgREVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG4gICAgdm0ubGlzdFR5cGUgPSAkcm91dGVQYXJhbXMudHlwZTtcbiAgICB2bS5saXN0ID0ge307XG5cbiAgICBkYXRhU2VydmljZS5HRVRhQ2hlY2tsaXN0KCRyb3V0ZVBhcmFtcy5saXN0SWQpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTVUNDRVNTJyk7IGNvbnNvbGUubG9nKHMpO1xuICAgICAgICB2bS5saXN0ID0gcztcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SJyk7IGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB2bS5saXN0ID0gZTtcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH0pO1xuXG4gICAgLy9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHRcblxuXHQkbG9nLmluZm8oJ2luIHRoZSB0ZWFtIGNoZWNrbGlzdHMgY29udHJvbGxlcicsICRyb3V0ZVBhcmFtcyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuY29udHJvbGxlcigndGVhbVBhZ2VDb250cm9sbGVyJywgdGVhbVBhZ2VDb250cm9sbGVyKTtcblxuXHR0ZWFtUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckbG9jYXRpb24nLCAnZGF0YVNlcnZpY2UnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0ZWFtUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sIGRhdGFTZXJ2aWNlKSB7XG5cblx0Ly9cdERFRklORSBMT0NBTCBWQVJJQUJMRVNcblx0dmFyIHZtID0gdGhpcztcblxuXHQvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTIFxuXHR2bS5hY3RpdmVDaGVja2xpc3RzPSBbXTtcblxuXHRkYXRhU2VydmljZS5HRVRhbGxDaGVja2xpc3RzKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRjb25zb2xlLmxvZygnU1VDQ0VTUycsIHMpO1xuXHRcdHZtLmFjdGl2ZUNoZWNrbGlzdHMgPSBzXG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0Y29uc29sZS5sb2coJ0VSUk9SJywgZSk7XG5cdFx0dm0uYWN0aXZlQ2hlY2tsaXN0cyA9IGU7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9KVxuXG5cdC8vXHRERUZJTkUgVklFVyBNT0RFTCBGVU5DVElPTlNcblx0dm0ubGlzdENsaWNrZWQgPSBmdW5jdGlvbihpZCkge1xuXHRcdGNvbnNvbGUubG9nKCdnb3QgdGhpcyBpZCcsIGlkKTtcblx0XHRjb25zb2xlLmxvZygncmVkaXJlY3RpbmcgdG8nLCB2bS5hY3RpdmVDaGVja2xpc3RzW2lkXS51cmwpXG5cdFx0JGxvY2F0aW9uLnBhdGgodm0uYWN0aXZlQ2hlY2tsaXN0c1tpZF0udXJsKTtcblx0fTtcblxuXG5cdCRsb2cuaW5mbygnaW4gdGhlIHRlYW0gY29udHJvbGxlcicpO1x0ICAgIC8vICBUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmNvbnRyb2xsZXIoJ3RlYW1EYXNoUGFnZUNvbnRyb2xsZXInLCB0ZWFtRGFzaFBhZ2VDb250cm9sbGVyKTtcblxuXHR0ZWFtRGFzaFBhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdmaXJlYmFzZVNlcnZpY2UnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0ZWFtRGFzaFBhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsIGZpcmViYXNlU2VydmljZSkge1xuXG5cdC8vXHRERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG5cdHZhciB2bSA9IHRoaXM7XG5cbiAgICAvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG4gICAgdm0udXNlcm5hbWUgPSAkcm91dGVQYXJhbXMudXNlcklkO1xuXG4gICAgLy8gIExPQUQgREFUQVxuICAgIGZpcmViYXNlU2VydmljZS5yZWFkLmludmVudG9yeUluc3RhbmNlcygpXG4gICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgIHZtLmluc3RhbmNlcyA9IHM7XG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgfSk7XG5cbiAgICAvLyAgREVGSU5FIFZJRVcgTU9ERUwgRlVOQ1RJT05TXG4gICAgdm0ubG9hZEluc3RhbmNlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3RlYW0vJyArICRyb3V0ZVBhcmFtcy51c2VySWQgKyBcIi9DTUVSZWNhcC9cIiArIGluc3RhbmNlSWQpO1xuICAgIH07XG4gICAgXG5cdCRsb2cuaW5mbygnaW4gdGhlIHRlYW1EYXNoUGFnZUNvbnRyb2xsZXInKTtcdCAgICAvLyAgVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb250cm9sbGVyKCd0ZWFtU2FsZXNTdW1tYXJ5UGFnZUNvbnRyb2xsZXInLCB0ZWFtU2FsZXNTdW1tYXJ5UGFnZUNvbnRyb2xsZXIpO1xuXG5cdHRlYW1TYWxlc1N1bW1hcnlQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdGVhbVNhbGVzU3VtbWFyeVBhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vXHRERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgdGVhbVNhbGVzU3VtbWFyeVBhZ2VDb250cm9sbGVyJyk7XHQgICAgLy8gIFRPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXG59IiwiXG4vKlxuKlx0RklSRUJBU0UgU0VSVklDRVxuKlxuKi9cblxuLy8gIERFRklORSBNT0RVTEVcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmZhY3RvcnkoJ2RhdGFQcm9jZXNzU2VydmljZScsIGRhdGFQcm9jZXNzU2VydmljZSk7XG5cbi8vICBERVBFTkRFTkNZIElOSkVDVElPTlxuZGF0YVByb2Nlc3NTZXJ2aWNlLiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLy8gIERFQ0xBUkUgVEhFIFNFUlZJQ0Vcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGF0YVByb2Nlc3NTZXJ2aWNlKCRsb2cpIHtcblxuICAgIC8vICBERUNMQVJFIEdMT0JBTFNcblxuICAgIC8vICBERUZJTkUgTUVUSE9EU1xuICAgIHZhciBkYXRhUHJvY2VzcyA9IHtcbiAgICAgICAgbGluZURhdGE6IHtcbiAgICAgICAgICAgIGZyb21BY2N0VHhzOiBsaW5lRGF0YUZyb21BY2N0VHhzXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAqICAgTElORSBEQVRBIEZST00gQUNDVCBUUkFOU0FDVElPTlNcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGxpbmVEYXRhRnJvbUFjY3RUeHMoZGF0YSkge1xuICAgICAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklBQkxFU1xuICAgICAgICB2YXIgcmV0dXJuQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgICBpZihkYXRhLnN0YXJ0VmFsdWUgPT0gdW5kZWZpbmVkKSBkYXRhLnN0YXJ0VmFsdWUgPSAwO1xuICAgICAgICB2YXIgYmFsYW5jZSA9IGRhdGEuc3RhcnRWYWx1ZTtcblxuICAgICAgICByZXR1cm5Db2xsZWN0aW9uLnB1c2goeyB4OjAsIHk6IGJhbGFuY2UgfSk7XG5cbiAgICAgICAgLy8gIElURVJBVEUgT1ZFUiBBTEwgVEhFIFRYU1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhLnR4cykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciB0aW1lUmF3ID0ga2V5LnNwbGl0KCdUJylbMV07XG4gICAgICAgICAgICB2YXIgdGltZSA9IHRpbWVSYXcuc3BsaXQoJy0nKVswXTtcbiAgICAgICAgICAgIHZhciBocnMgPSB0aW1lLnNwbGl0KCc6JylbMF07XG4gICAgICAgICAgICB2YXIgbWlucyA9IHRpbWUuc3BsaXQoJzonKVsxXTtcbiAgICAgICAgICAgIHZhciBzZWMgPSB0aW1lLnNwbGl0KCc6JylbMl07XG4gICAgICAgICAgICB2YXIgdGltZVN0YW1wID0gc2VjICsgKG1pbnMqNjApICsgKGhycyo2MCo2MClcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGltZVN0YW1wLCBkYXRhLnR4c1trZXldKTtcbiAgICAgICAgICAgIGJhbGFuY2UgKz0gcGFyc2VJbnQoZGF0YS50eHNba2V5XS5iYWxhbmNlX2NoYW5nZSk7XG4gICAgICAgICAgICAvL3ZhciB0aW1lUmF3ID0ga2V5LnNwbGl0KCdUJylbMV07XG4gICAgICAgICAgICAvL3ZhciB0aW1lID0gdGltZVJhdy5zcGxpdCgnLScpWzBdO1xuICAgICAgICAgICAgdmFyIGFQb2ludCA9IHsgeDogdGltZSwgeTogYmFsYW5jZSB9O1xuICAgICAgICAgICAgcmV0dXJuQ29sbGVjdGlvbi5wdXNoKGFQb2ludCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIHRoZSByZXR1cm4gY29sbGVjdGlvbicsIHJldHVybkNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHJldHVybiByZXR1cm5Db2xsZWN0aW9uO1xuICAgIH07XG5cbiAgICAvLyAgUkVUVVJOIFRIRSBNRVRIT0RcbiAgICByZXR1cm4gZGF0YVByb2Nlc3M7XG59OyIsIi8qXG4qXHRCQUNLRU5EIERBVEEgU0VSVklDRVxuKlxuKi9cblxuLy9kZWZpbmUgbW9kdWxlXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5mYWN0b3J5KCdkYXRhU2VydmljZScsIGRhdGFTZXJ2aWNlKTtcblxuLy9kZXBlbmRlbmN5IGluamVjdGlvbnNcbmRhdGFTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbi8vZGVjbGFyZSB0aGUgc2VydmljZVxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRhU2VydmljZSgkaHR0cCkge1xuXG5cdC8vZGVmaW5lIG1ldGhvZHNcblx0dmFyIGRhdGFTZXJ2aWNlID0ge1xuICAgICAgICBHRVRhQ2hlY2tsaXN0OiBHRVRhQ2hlY2tsaXN0LFxuICAgICAgICBHRVRhbGxDaGVja2xpc3RzOiBHRVRhbGxDaGVja2xpc3RzLFxuICAgICAgICBHRVRwcm9kdWN0RGF0YTogR0VUcHJvZHVjdERhdGFcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICAgR0VUIEEgQ0hFQ0tMSVNUXG4gICAgKlxuICAgICogICBUaGlzIHByb3ZpZGVzIHRoZSBtb2RlbCBmb3IgYSBzaW5nbGUgY2hlY2tsaXN0XG4gICAgKi9cbiAgIGZ1bmN0aW9uIEdFVGFDaGVja2xpc3QoaWQpIHtcbiAgICAgICAgLy8gIE5PVElGWSBQUk9HUkVTU1xuICAgICAgICAvLyAgREVDTEFSIExPQ0FMIFZBUklBQkxFU1xuICAgICAgICB2YXIgcGF0aCA9ICcvQVBJL2RhdGEvYUNoZWNrbGlzdC8nICsgaWQ7XG5cbiAgICAgICAgLy8gIFJFVFVSTiBBU1lOQyBXT1JLXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBHRVRhQ2hlY2tsaXN0UHJvbWlzZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0XHR1cmw6IHBhdGhcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVqZWN0aW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBcImFzc2lnbmVkVG9cIiA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIiA6IFwiSWFuIE1jQWxsaXN0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBcInNxSWRcIiA6IFwiclV4TGdBcXNWa2xDTl8xNGRmYkVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImNvbXBsZXRlZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiY29tcGxldGVkRGF0ZVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkRGF0ZVwiIDogXCIyMDE5LTA0LTI1VDEwOjUwOjM4LTA3OjAwXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXF1aXBtZW50XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCIxMHgxMENQQ2Fub3B5XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiQ2FsaWZvcm5pYSBQYWxtLCBicm93biAxMHgxMCBmcmFtZSAmIHRvcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIkNhbm9weVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiSG9uZGEyMjAwaVwiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRcIiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRBdFwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQnlcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIkhvbmRhIDIyMDBpIGdhcyBwb3dlcmVkIGdlbmVyYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIkhvbmRhIEdlbmVyYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiTWFuZGVscHJvZmlNaW5pXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiTWFuZGVscHJvZmkgTWluaSBOdXQgUm9hc3RpbmcgTWFjaGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIlJvYXN0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZGVkXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcImNhbm9weVdlaWdodHNcIiA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkXCIgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQXRcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEJ5XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNjcmlwdGlvblwiIDogXCJDZW1lbnQgZmlsbGVkIGNhbm9weSB3ZWlnaHRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiQ2Fub3B5IFdlaWdodHMgKDR4KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiY2FzaEJveFwiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRcIiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRBdFwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQnlcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIkNhc2ggYm94IHRvIGhvbGQgY2FzaCBkdXJpbmcgbWFya2V0cyAmIGV2ZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIkNhc2ggQm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJjbGVhbmluZ0JveFwiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRcIiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRBdFwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQnlcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIkJveCB3aXRoIHBhcGVydG93ZWxzLCB0cmFzaCBiYWdzLCBmaXJzdCBhaWQga2l0LCBzb2FwLCBidW5nZWVzLCBsYXJnZSBjbGlwcywgYW5kIHNtYWxsIGNsaXBzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiQ2xlYW5pbmcgQm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJjb29raW5nQm94XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiQWxsIHN1cHBpZXMgcmVxdWlyZWQgZm9yIGNvb2tpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaXRlbVwiIDogXCJDb29raW5nIEJveFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiZWxlY3Ryb25pY3NCb3hcIiA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkXCIgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQXRcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEJ5XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNjcmlwdGlvblwiIDogXCJCb3ggd2l0aCBpcGFkLCBzY2FsZSwgY2hpcCByZWFkZXIsIHN3aXBlIHJlYWQsIHBvd2VyIGNvcmRzLCBhbmQgY2hhbmdlIGJhbmtzIGZvbGlvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiRWxlY3Ryb25pY3MgQm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJmaWxlQm94XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiRmlsZSBib3ggdG8gY29udGFpbiByZXR1cm5pbmcgemlwbG9jayBiYWdzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiRmlsZSBCb3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZGVkXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcImdhbFdhdGVySnVnc1wiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRcIiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRBdFwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQnlcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIldhdGVyanVncyBmb3Iga2V0dGxlIGNsZWFuaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiR2FsbG9uIFdhdGVyIEp1Z3MgKDJ4KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiaGFuZHdhc2hTdGF0aW9uXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiNSBnYWwgY2F0Y2ggYnVja2V0IGFuZCAzIGdhbCB0aGVybW9zXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiSGFuZHdhc2ggU3RhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwicGFja2FnaW5nQm94XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiQm94IHdpdGggc21hbGwsIGF2ZXJhZ2UgJiBpbXByZXNzaXZlIGNvbmVzLCBzdGlja2VycywgdHdpc3RpZXMsIHNjaXNzb3JzLCB0YXBlLCBwZW5zIGFuZCBleGFtcGxlIHBsYXR0ZXJzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiUGFja2FnaW5nIEJveFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwicGxhdHRlcnMyMG96XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiMTAgcGxhdHRlcnMgKHRvcHMgJiBib3R0b21zKSBpbiBhIHRvdGUgYmFnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiMjBveiBQbGF0dGVycyAoMTB4KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwic2Nvb3BpbmdCaW5zQm94XCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiQm94IHdpdGggYWxsIDggY29va2VkIG51dCBiaW5zLCBjb29raW5nIG1hdCwgYmFubmVycywgdGFibGVjbG90aFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIlNjb29waW5nIEJpbnMgQm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJzdGluZ2VyU3RhbmRhcmRcIiA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkXCIgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQXRcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEJ5XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNjcmlwdGlvblwiIDogXCJFeHRlbnNpb24gY29yZCB3aXRoIDMgcHJvbmdlZCBzcGxpdHRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIlN0YW5kYXJkIEV4dGVuc2lvbiBDb3JkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0YWJsZVJpc2Vyc1wiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRcIiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRBdFwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uZmlybWVkQnlcIiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIlN0YWNrYWJsZSB0YWJsZSByaXNlcnMgaW4gYSB0b3RlIGJhZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIlRhYmxlIFJpc2Vyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkZWRcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwidGFibGVzXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiMSBoZWF2eSBkdXR5IGFuZCAzIG1lZGl1bSBkdXR5IHRhYmxlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCIgOiBcIlRhYmxlcyAoNHgpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3YWxsc0JhZ0NQXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZFwiIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbmZpcm1lZEF0XCIgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maXJtZWRCeVwiIDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiQ2FsaWZvcm5pYSBQYWxtLCB3YWxscyBiYWcgd2l0aCA0IHdhbGxzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1cIiA6IFwiV2FsbHMgQmFnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZFwiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiIDogXCItTGRDZ1VOdHpfUlVfYTRvUVNWYVwiLFxuICAgICAgICAgICAgICAgICAgICBcImtpdFwiIDoge1xuICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiIDogXCJLaXQgIzFcIixcbiAgICAgICAgICAgICAgICAgICAgICBcInNxSWRcIiA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJyYXdNYXRlcmlhbHNcIiA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcImV4dHJhTGlxdWlkc1wiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjYXJhZmVEUjZjXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzY3JpcHRpb25cIiA6IFwiNiBDdXBzIGJvdHRsZSBvZiBEcnVua2VuIE1peHR1cmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCIgOiBcIkJvdHRsZSBvZiBEcnVua2VuIE1peFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInF0eVwiIDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzcXJJZFwiIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FyYWZlU1I2Y1wiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2NyaXB0aW9uXCIgOiBcIjYgQ3VwcyBib3R0bGUgb2YgU3dhbHR5IFZhbmlsbGEgTWl4dHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIiA6IFwiQm90dGxlIG9mIFN3YWx0eSBNaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJxdHlcIiA6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic3FySWRcIiA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwibnV0c1wiIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmdWxsUGVjYW5zXCI6ICAgIHsgXCJuYW1lXCI6XCJQZWNhbiBGdWxsIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiR2FsbG9uIHppcGxvY2sgYmFnLCBmdWxsIGJhdGNoIG9mIHBlY2FucyAmIHN1Z2FyXCIsIFwiYWxsb2NhdGVkXCI6MCwgXCJjb2xsZWN0ZWRcIjowLCBcImRpZmZlcmVuY2VcIjowLCBcImNvbXBsZXRlZFwiOmZhbHNlLCBcImNvbXBsZXRlZEJ5XCI6XCJcIiwgXCJjb21wbGV0ZWRBdFwiOlwiXCIsIFwic3FySWRcIjogXCJcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmdWxsQWxtb25kc1wiOiAgIHsgXCJuYW1lXCI6XCJBbG1vbmQgRnVsbCBCYXRjaGVzXCIsIFwiZGlzY3JpcHRpb25cIjpcIkdhbGxvbiB6aXBsb2NrIGJhZywgZnVsbCBiYXRjaCBvZiBhbG1vbmRzICYgc3VnYXJcIiwgXCJhbGxvY2F0ZWRcIjowLCBcImNvbGxlY3RlZFwiOjAsIFwiZGlmZmVyZW5jZVwiOjAsIFwiY29tcGxldGVkXCI6ZmFsc2UsIFwiY29tcGxldGVkQnlcIjpcIlwiLCBcImNvbXBsZXRlZEF0XCI6XCJcIiwgXCJzcXJJZFwiOiBcIlwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZ1bGxDYXNoZXdzXCI6ICAgeyBcIm5hbWVcIjpcIkNhc2hldyBGdWxsIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiR2FsbG9uIHppcGxvY2sgYmFnLCBmdWxsIGJhdGNoIG9mIGNhc2hld3MgJiBzdWdhclwiLCBcImFsbG9jYXRlZFwiOjAsIFwiY29sbGVjdGVkXCI6MCwgXCJkaWZmZXJlbmNlXCI6MCwgXCJjb21wbGV0ZWRcIjpmYWxzZSwgXCJjb21wbGV0ZWRCeVwiOlwiXCIsIFwiY29tcGxldGVkQXRcIjpcIlwiLCBcInNxcklkXCI6IFwiXCIgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZ1bGxQZWFudXRzXCI6ICAgeyBcIm5hbWVcIjpcIlBlYW51dCBGdWxsIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiR2FsbG9uIHppcGxvY2sgYmFnLCBmdWxsIGJhdGNoIG9mIHBlYW51dHMgJiBzdWdhclwiLCBcImFsbG9jYXRlZFwiOjAsIFwiY29sbGVjdGVkXCI6MCwgXCJkaWZmZXJlbmNlXCI6MCwgXCJjb21wbGV0ZWRcIjpmYWxzZSwgXCJjb21wbGV0ZWRCeVwiOlwiXCIsIFwiY29tcGxldGVkQXRcIjpcIlwiLCBcInNxcklkXCI6IFwiXCIgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmdWxsSGF6ZWxudXRzXCI6IHsgXCJuYW1lXCI6XCJIYXpsZW51dCBGdWxsIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiR2FsbG9uIHppcGxvY2sgYmFnLCBmdWxsIGJhdGNoIG9mIGhhemVsbnV0cyAmIHN1Z2FyXCIsIFwiYWxsb2NhdGVkXCI6MCwgXCJjb2xsZWN0ZWRcIjowLCBcImRpZmZlcmVuY2VcIjowLCBcImNvbXBsZXRlZFwiOmZhbHNlLCBcImNvbXBsZXRlZEJ5XCI6XCJcIiwgXCJjb21wbGV0ZWRBdFwiOlwiXCIsIFwic3FySWRcIjogXCJcIiAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhhbGZQZWNhbnNcIjogICAgeyBcIm5hbWVcIjpcIlBlY2FuIEhhbGYgQmF0Y2hlc1wiLCBcImRpc2NyaXB0aW9uXCI6XCJRdWFydCB6aXBsb2NrIGJhZywgaGFsZiBiYXRjaCBvZiBwZWNhbnMgJiBzdWdhclwiLCBcImFsbG9jYXRlZFwiOjAsIFwiY29sbGVjdGVkXCI6MCwgXCJkaWZmZXJlbmNlXCI6MCwgXCJjb21wbGV0ZWRcIjpmYWxzZSwgXCJjb21wbGV0ZWRCeVwiOlwiXCIsIFwiY29tcGxldGVkQXRcIjpcIlwiLCBcInNxcklkXCI6IFwiXCIgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhhbGZBbG1vbmRzXCI6ICAgeyBcIm5hbWVcIjpcIkFsbW9uZCBIYWxmIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiUXVhcnQgemlwbG9jayBiYWcsIGhhbGYgYmF0Y2ggb2YgcGVjYW5zICYgc3VnYXJcIiwgXCJhbGxvY2F0ZWRcIjowLCBcImNvbGxlY3RlZFwiOjAsIFwiZGlmZmVyZW5jZVwiOjAsIFwiY29tcGxldGVkXCI6ZmFsc2UsIFwiY29tcGxldGVkQnlcIjpcIlwiLCBcImNvbXBsZXRlZEF0XCI6XCJcIiwgXCJzcXJJZFwiOiBcIlwiICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoYWxmSGF6ZWxudXRzXCI6IHsgXCJuYW1lXCI6XCJIYXpsZW51dCBIYWxmIEJhdGNoZXNcIiwgXCJkaXNjcmlwdGlvblwiOlwiUXVhcnQgemlwbG9jayBiYWcsIGhhbGYgYmF0Y2ggb2YgcGVjYW5zICYgc3VnYXJcIiwgXCJhbGxvY2F0ZWRcIjowLCBcImNvbGxlY3RlZFwiOjAsIFwiZGlmZmVyZW5jZVwiOjAsIFwiY29tcGxldGVkXCI6ZmFsc2UsIFwiY29tcGxldGVkQnlcIjpcIlwiLCBcImNvbXBsZXRlZEF0XCI6XCJcIiwgXCJzcXJJZFwiOiBcIlwiICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJyZXR1cm5EYXRlXCIgOiBcIjIwMTktMDQtMjhUMTg6MDA6MDAtMDc6MDBcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzaGlwRGF0ZVwiIDogXCIyMDE5LTA0LTI2VDA5OjAwOjAwLTA3OjAwXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiIDogXCJlcXVpcG1lbnRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ1cmxcIiA6IFwiL3RlYW0vY2hlY2tsaXN0cy9lcXVpcG1lbnQvLUxkQ2dVTnR6X1JVX2E0b1FTVmFcIlxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdzZW5kaW5nIHJlamN0aW9uIG9iamVjdCcsIHJlamVjdGlvbk9iamVjdCk7XG4gICAgICAgICAgICAgICAgLy8gIE9OIEVSUk9SIFNFTkQgVEVNUCBEQVRBIEJBQ0tcbiAgICAgICAgICAgICAgICByZWplY3QocmVqZWN0aW9uT2JqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgfTtcblxuICAgIC8qXG4gICAgKiAgIEdFVCBBTEwgQ0hFQ0tMSVNUU1xuICAgICpcbiAgICAqICAgVGhpcyBwcm92aWRlcyBhbGwgdGhlIGNoZWNrbGlzdHMgZnJvbSB0aGUgc2VydmVyXG4gICAgKi9cbiAgICBmdW5jdGlvbiBHRVRhbGxDaGVja2xpc3RzKCkge1xuICAgICAgICAvLyAgTk9USUZZIFBST0dSRVNTXG4gICAgICAgIC8vICBERUNMQVIgTE9DQUwgVkFSSUFCTEVTXG5cbiAgICAgICAgLy8gIFJFVFVSTiBBU1lOQyBXT1JLXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBHRVRhbGxDaGVja2xpc3RzUHJvbWlzZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0XHR1cmw6ICcvQVBJL2RhdGEvYWxsQ2hlY2tsaXN0cydcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVqZWN0aW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBcIi1MZENnVU50el9SVV9hNG9RU1ZhXCI6IHsgaWQ6IFwiLUxkQ2dVTnR6X1JVX2E0b1FTVmFcIiAsdGl0bGU6IFwiS2l0ICMyIENoZWNrb3V0IFVwZGF0ZWRcIiwgZHVlRGF0ZTogXCIwNS8wMS8xOVwiLCAgYXNzaWduZWRUbzogeyBuYW1lOiBcIklhbiBNY0FsbGlzdGVyXCJ9LCB0eXBlOiBcIkVxdWlwbWVudCBDaGVja291dFwiLCBmb3I6XCJLaXQgIzFcIiwgc2hpcERhdGU6IFwiMjAxOS0wNC0yNlQwOTowMDowMC0wNzowMFwiLCB1cmw6XCIvdGVhbS9jaGVja2xpc3RzL2VxdWlwbWVudC8tTGRDZ1VOdHpfUlVfYTRvUVNWYVwifSxcbiAgICAgICAgICAgICAgICAgICAgXCJzb21ldGhpbmdFbHNlXCI6IHsgaWQ6XCJzb21ldGhpbmdFbHNlXCIsIHRpdGxlOiBcIktpdCAjMyBDaGVja291dFwiLCBkdWVEYXRlOiBcIjA1LzAxLzE5XCIsICBhc3NpZ25lZFRvOiBcIk5hcnkgS3VjaFwiLCB0eXBlOiBcIlN0YWdpbmdcIiwgZm9yOlwiV2FyZWhvdXNlXCIsIHVybDpcIi90ZWFtL2NoZWNrbGlzdHMvc3RhZ2luZ1wiIH0gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vICBPTiBFUlJPUiBTRU5EIFRFTVAgREFUQSBCQUNLXG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlamVjdGlvbk9iamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcblxuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAqICAgR0VUIFBST0RVQ1QgREFUQVxuICAgICpcbiAgICAqICAgVGhpcyBwcm92aWRlcyB0aGUgcHJvZHVjdCBkYXRhIGZyb20gdGhlIHNlcnZlci5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIEdFVHByb2R1Y3REYXRhKGlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlN3YWx0eSBQZWNhbnNcIixcbiAgICAgICAgICAgICAgICBcInN1YnRpdGxlXCI6IFwiT3VyIE1vc3QgUG9wdWxhciBTd2VldCAmIFNhbHR5IFBlY2FuIFJlY2lwZVwiLFxuICAgICAgICAgICAgICAgIFwicHJvZHVjZXJcIjogXCJBaC1OdXRzIVwiLFxuICAgICAgICAgICAgICAgIFwidmFyaWF0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZWM0ZWI1ZTAtNDUxMi0xMWU5LWFjYjgtZDVjMWU4MDdiMWIxXCI6IHsgXCJwcmljZVwiOiA5OTksIFwidW5pdFwiOiBcImZvciBhIDVveiBCYWdcIiwgXCJ3ZWlnaHRcIjogNS4wLCBcImNoYW5uZWxcIjogXCJvbmxpbmVcIiB9LFxuICAgICAgICAgICAgICAgICAgICBcIjdjOTlhNTEwLTQ1MTMtMTFlOS04MGEzLTJkNDg4YWU5NTE5M1wiOiB7IFwicHJpY2VcIjogMTU5OSwgXCJ1bml0XCI6IFwiZm9yIDJ4IDVveiBCYWdzXCIsIFwid2VpZ2h0XCI6IDEwLjAsIFwiY2hhbm5lbFwiOiBcIm9ubGluZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiODBjZTljMzAtNDUxMy0xMWU5LWJkMjItYmI4NWFkMzJhOTkwXCI6IHsgXCJwcmljZVwiOiAyNTk5LCBcInVuaXRcIjogXCJmb3IgNHggNW96IEJhZ3NcIiwgXCJ3ZWlnaHRcIjogMjAuMCwgXCJjaGFubmVsXCI6IFwib25saW5lXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgXCI4NGMzMmVmMC00NTEzLTExZTktOTNiNS05MTE2NWUzNWE1ZTlcIjogeyBcInByaWNlXCI6IDI5OTksIFwidW5pdFwiOiBcImZvciA1eCA1b3ogQmFnc1wiLCBcIndlaWdodFwiOiAyNS4wLCBcImNoYW5uZWxcIjogXCJvbmxpbmVcIiB9LFxuICAgICAgICAgICAgICAgICAgICBcIjg5MjZkNzMwLTQ1MTMtMTFlOS04Yjg5LThmN2ExOWU5Nzc2YVwiOiB7IFwicHJpY2VcIjogMzk5OSwgXCJ1bml0XCI6IFwiZm9yIDd4IDVveiBCYWdzXCIsIFwid2VpZ2h0XCI6IDM1LjAsIFwiY2hhbm5lbFwiOiBcIm9ubGluZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiOGRlM2VhMTAtNDUxMy0xMWU5LTgzMzctZDc1NWMwYzE4ZTQwXCI6IHsgXCJwcmljZVwiOiA0OTk5LCBcInVuaXRcIjogXCJmb3IgOXggNW96IEJhZ3NcIiwgXCJ3ZWlnaHRcIjogNDUuMCwgXCJjaGFubmVsXCI6IFwib25saW5lXCIgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0VmFyaWF0aW9uXCI6IFwiN2M5OWE1MTAtNDUxMy0xMWU5LTgwYTMtMmQ0ODhhZTk1MTkzXCIsXG4gICAgICAgICAgICAgICAgXCJkaXNjcmlwdGlvblwiOiBcIlN3ZWV0IFBlY2FucyByb2FzdGVkIGFuZCBnbGF6ZWQgaW4gb3VyIHdvcmxkIGZhbW91cyBzZWNyZXQgcmVjaXBlIGdsYXplIC0gdGhlIHBlcmZlY3QgY29tYmluYXRpb24gb2Ygc3dlZXQgdmFuaWxsYSB3aXRoIGEgaGludCBvZiBzYWx0aW5lc3MuIE1tbW1tIVwiLFxuICAgICAgICAgICAgICAgIFwic3VnZ2VzdGlvbnNcIjogXCJHcmVhdCBhcyBhIHN0YW5kIGFsb25lIHNuYWNrIG9yIGNob3AgdGhlbSB1cCBhbmQgdXNlIHRoZW0gYXMgYSB0b3BwaW5nIGZvciBpY2UgY3JlYW0sIHlvZ3VydCwgc2FsYWRzIGFuZCBtb3JlIVwiLFxuICAgICAgICAgICAgICAgIFwicnRlXCI6IFwiUGVjYW5zLCBTdWdhciwgVmFuaWxsYSwgU2VhIFNhbHQuXCIsXG4gICAgICAgICAgICAgICAgXCJjZXJ0aWZpY2F0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiMDFcIjpcIlZlZ2FuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiMDJcIjpcIkdsdXRlbiBGcmVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiMDNcIjpcIkNvbnRhaW5zIFRyZWUgTnV0c1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImJyYW5kTG9nb1VybFwiOiBcImh0dHBzOi8vczMtdXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vYXdlLXN3ZWV0LWFzc2V0cy9sb2dvcy9BaC1udXRzX2xvZ28ucG5nXCIsXG4gICAgICAgICAgICAgICAgXCJwcm9kdWN0U2hvdFVybHNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcIjAxXCI6IFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hd2Utc3dlZXQtYXNzZXRzL3Byb2R1Y3RzL1NSLXBlY2Fucy1wczAxLnBuZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcIjAyXCI6IFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hd2Utc3dlZXQtYXNzZXRzL3Byb2R1Y3RzL1NSLXBlY2Fucy1wczAyLnBuZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcIjAzXCI6IFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hd2Utc3dlZXQtYXNzZXRzL3Byb2R1Y3RzL1NSLXBlY2Fucy1wczAzLnBuZ1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInByb2R1Y3RTaG90QXJyYXlcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vczMtdXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vYXdlLXN3ZWV0LWFzc2V0cy9wcm9kdWN0cy9TUi1wZWNhbnMtcHMwMS5wbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL3MzLXVzLXdlc3QtMi5hbWF6b25hd3MuY29tL2F3ZS1zd2VldC1hc3NldHMvcHJvZHVjdHMvU1ItcGVjYW5zLXBzMDIucG5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hd2Utc3dlZXQtYXNzZXRzL3Byb2R1Y3RzL1NSLXBlY2Fucy1wczAzLnBuZ1wiXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcInByb2R1Y3RUaHVtYnNVcmxzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCIwMVwiOiBcImh0dHBzOi8vczMtdXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vYXdlLXN3ZWV0LWFzc2V0cy9wcm9kdWN0cy90aHVtYnMvU1ItcGVjYW5zLXBzMDMtdGh1bWIucG5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiMDJcIjogXCJodHRwczovL3MzLXVzLXdlc3QtMi5hbWF6b25hd3MuY29tL2F3ZS1zd2VldC1hc3NldHMvcHJvZHVjdHMvdGh1bWJzL1NSLXBlY2Fucy1wczAzLXRodW1iLnBuZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcIjAzXCI6IFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hd2Utc3dlZXQtYXNzZXRzL3Byb2R1Y3RzL3RodW1icy9TUi1wZWNhbnMtcHMwMy10aHVtYi5wbmdcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9O1xuXG5cdC8vdHVybiB0aGUgbWV0aG9kXG4gICAgcmV0dXJuIGRhdGFTZXJ2aWNlO1x0XG59O1xuXG4iLCIvKlxuKlx0RklSRUJBU0UgU0VSVklDRVxuKlxuKi9cblxuLy8gIERFRklORSBNT0RVTEVcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmZhY3RvcnkoJ2ZpcmViYXNlU2VydmljZScsIGZpcmViYXNlU2VydmljZSk7XG5cbi8vICBERVBFTkRFTkNZIElOSkVDVElPTlxuZmlyZWJhc2VTZXJ2aWNlLiRpbmplY3QgPSBbJyRsb2cnLCAnJGh0dHAnLCAnJGZpcmViYXNlJywgJyRmaXJlYmFzZU9iamVjdCcsICckZmlyZWJhc2VBcnJheSddO1xuXG4vLyAgREVDTEFSRSBUSEUgU0VSVklDRVxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaXJlYmFzZVNlcnZpY2UoJGxvZywgJGh0dHAsICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSkge1xuXG4gICAgLy8gIERFQ0xBUkUgR0xPQkFMU1xuXG4gICAgLy8gIERFRklORSBNRVRIT0RTXG4gICAgdmFyIGZpcmViYXNlTW9kID0ge1xuICAgICAgICByZWFkOiB7XG4gICAgICAgICAgICBpbnZlbnRvcnlJbnN0YW5jZXM6IHJlYWRJbnZlbnRvcnlJbnN0YW5jZXMsXG4gICAgICAgICAgICBpbnN0YW5jZXM6IHJlYWRJbnN0YW5jZXMsXG4gICAgICAgICAgICBjaGFubmVsczogcmVhZENoYW5uZWxzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgZW1haWxVc2VyOiBjcmVhdGVfdXNlcl9lbWFpbCxcbiAgICAgICAgICAgIHNlYXNvbjogY3JlYXRlU2Vhc29uXG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZToge1xuICAgICAgICAgICAgZW1haWw6IGVtYWlsX2F1dGhlbnRpY2F0aW9uXG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICBpbnN0YW5jZUFjY3RzOiBxdWVyeUluc3RhbmNlQWNjdHMsXG4gICAgICAgICAgICBpbnN0YW5jZTogcXVlcnlJbnN0YW5jZXNcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgaW5zdGFuY2VBY2N0czogcmVzb2x2ZUluc3RhbmNlQWNjdHNcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICogICBDUkVBVEVcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNlYXNvbihjaElkLCB2YWx1ZSkge1xuICAgICAgICAvLyAgREVDTEFSRSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgdmFyIHNlYXNvbk9iamVjdCA9IHtcbiAgICAgICAgICAgIFwiY2hhbm5lbElkXCI6IGNoSWQsXG4gICAgICAgICAgICBcInRpdGxlXCI6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIHZhciBjaGFubmVsT2JqZWN0ID0ge1xuICAgICAgICAgICAgXCJzZWFzb25JZFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJ0aXRsZVwiOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgICAvLyAgTk9USUZZIFBST0dSRVNTXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGluZyBhIG5ldyBzZWFzb24nLCBzZWFzb25PYmplY3QpO1xuICAgICAgICAvLyAgUkVUVVJOIEFTWU5DIFdPUktcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAvLyAgR2V0IGEga2V5IGZvciB0aGUgbmV3IHBvc3RcbiAgICAgICAgICAgIHZhciBuZXdTZWFzb25LZXkgPSBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdzZWFzb25zJykucHVzaCgpLmtleTtcbiAgICAgICAgICAgIHZhciBuZXdDaFNlYXNvbktleSA9IGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCcvY2hhbm5lbHMvJyArIGNoSWQgKyBcIi9zZWFzb25zXCIpLnB1c2goKS5rZXk7XG5cbiAgICAgICAgICAgIC8vIFdyaXRlIHRoZSBuZXcgcG9zdCdzIGRhdGEgc2ltdWx0YW5lb3VzbHkgaW4gdGhlIHBvc3RzIGxpc3QgYW5kIHRoZSB1c2VyJ3MgcG9zdCBsaXN0LlxuICAgICAgICAgICAgdmFyIHVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIHVwZGF0ZXNbJy9zZWFzb25zLycgKyBuZXdTZWFzb25LZXldID0gc2Vhc29uT2JqZWN0O1xuICAgICAgICAgICAgdXBkYXRlc1snL2NoYW5uZWxzLycgKyBjaElkICsgJy9zZWFzb25zLycgKyBuZXdDaFNlYXNvbktleV0gPSB7IHNlYXNvbklkOiBuZXdTZWFzb25LZXksIHRpdGxlOiB2YWx1ZSB9O1xuXG4gICAgICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLnVwZGF0ZSh1cGRhdGVzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiAgIFJFQUQgSU5WRU5UT1JZIElOU1RBTkNFU1xuICAgICovXG4gICAgZnVuY3Rpb24gcmVhZEludmVudG9yeUluc3RhbmNlcygpIHtcbiAgICAgICAgLy8gIERFQ0xBUkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIC8vICBOT1RJRlkgUFJPR1JFU1NcbiAgICAgICAgY29uc29sZS5sb2coJ3JlYWRpbmcgaW52ZW50b3J5IGluc3RhbmNlcycpO1xuICAgICAgICAvLyAgUkVUVVJOIEFTWU5DIFdPUktcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJy9pbnZlbnRvcnkvaW5zdGFuY2VzJykub25jZSgndmFsdWUnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc25hcHNob3QudmFsKCkpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICAgUkVBRCBJTlNUQU5DRVNcbiAgICAqL1xuICAgZnVuY3Rpb24gcmVhZEluc3RhbmNlcygpIHtcbiAgICAgICAgLy8gIERFQ0xBUkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIC8vICBOT1RJRlkgUFJPR1JFU1NcbiAgICAgICAgY29uc29sZS5sb2coJ3JlYWRpbmcgaW5zdGFuY2VzJyk7XG4gICAgICAgIC8vICBSRVRVUk4gQVNZTkMgV09SS1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignL2luc3RhbmNlcycpLm9uY2UoJ3ZhbHVlJylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Moc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNuYXBzaG90LnZhbCgpKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiAgIFJFQUQgQ2hhbm5lbHNcbiAgICAqL1xuICAgZnVuY3Rpb24gcmVhZENoYW5uZWxzKCkge1xuICAgIC8vICBERUNMQVJFIExPQ0FMIFZBUklBQkxFU1xuICAgIC8vICBOT1RJRlkgUFJPR1JFU1NcbiAgICBjb25zb2xlLmxvZygncmVhZGluZyBDaGFubmVscycpO1xuICAgIC8vICBSRVRVUk4gQVNZTkMgV09SS1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJy9jaGFubmVscycpLm9uY2UoJ3ZhbHVlJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzbmFwc2hvdCkge1xuICAgICAgICAgICAgcmVzb2x2ZShzbmFwc2hvdC52YWwoKSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG4gICAgLypcbiAgICAqICAgRU1BSUwgQVVUSEVOVElDQVRJT05cbiAgICAqICAgXG4gICAgKiAgIFRoaXMgbWV0aG9kIHRha2VzIGEgdXNlcm5hbWUgKGVtYWlsKSBhbmQgcGFzc3dvcmQsIGFuZCByZXR1cm5zIGEgc3VjZXNzIG9yIGZhaWx1cmUgXG4gICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVfdXNlcl9lbWFpbChlbWFpbCwgcGFzc3dvcmQpIHtcbiAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcblxuICAgICAgICAvLyAgTk9USUZZIFBST0dJUkVTU1xuICAgICAgICAkbG9nLmluZm8oJ2F1dGhlbnRpY2F0aW5nIGVtYWlsJyk7XG5cbiAgICAgICAgLy8gIHJldHVybiBuZXcgYXN5bmMgd29ya1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAvLyAgQVVUSEVOVElDQVRFIFdJVEggRklSRUJBU0VcbiAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5jcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjZXNzKHMpIHtcbiAgICAgICAgICAgICAgICAvLyAgUEFTUyBUSEUgUkVTVUxUIEJBQ0tcbiAgICAgICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKlxuICAgICogICBFTUFJTCBBVVRIRU5USUNBVElPTlxuICAgICogICBcbiAgICAqICAgVGhpcyBtZXRob2QgdGFrZXMgYSB1c2VybmFtZSAoZW1haWwpIGFuZCBwYXNzd29yZCwgYW5kIHJldHVybnMgYSBzdWNlc3Mgb3IgZmFpbHVyZSBcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGVtYWlsX2F1dGhlbnRpY2F0aW9uKGVtYWlsLCBwYXNzd29yZCkge1xuICAgICAgICAvLyAgREVGSU5FIExPQ0FMIFZBUklBQkxFU1xuXG4gICAgICAgIC8vICBOT1RJRlkgUFJPR0lSRVNTXG4gICAgICAgICRsb2cuaW5mbygnYXV0aGVudGljYXRpbmcgZW1haWwnKTtcblxuICAgICAgICAvLyAgcmV0dXJuIG5ldyBhc3luYyB3b3JrXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIC8vICBBVVRIRU5USUNBVEUgV0lUSCBGSVJFQkFTRVxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsLCBwYXNzd29yZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2VzcyhzKSB7XG4gICAgICAgICAgICAgICAgLy8gIFBBU1MgVEhFIFJFU1VMVCBCQUNLXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzKTtcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0cmVqZWN0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKiAgIFFVRVJZIElOU1RBTkNFIEFDQ1RTXG4gICAgKiAgIFxuICAgICogICBUaGlzIG1ldGhvZCB0YWtlcyBhIHVzZXJuYW1lIChlbWFpbCkgYW5kIHBhc3N3b3JkLCBhbmQgcmV0dXJucyBhIHN1Y2VzcyBvciBmYWlsdXJlIFxuICAgICovXG4gICAgZnVuY3Rpb24gcXVlcnlJbnN0YW5jZUFjY3RzKGluc3RhbmNlSWQpIHtcbiAgICAgICAgLy8gIERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgLy8gIFJFVFVSTiBBU1lOQyBXT1JLXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUFjY3RzID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2ludmVudG9yeS9hY2N0cycpLm9yZGVyQnlDaGlsZCgnaW5zdGFuY2VfaWQnKS5lcXVhbFRvKGluc3RhbmNlSWQpO1xuXG4gICAgICAgICAgICBpbnN0YW5jZUFjY3RzLm9uY2UoXCJ2YWx1ZVwiKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNuYXBzaG90LnZhbCgpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICAgUVVFUlkgSU5TVEFOQ0VTXG4gICAgKiAgIFxuICAgICogICBUaGlzIG1ldGhvZCB0YWtlcyBhIHVzZXJuYW1lIChlbWFpbCkgYW5kIHBhc3N3b3JkLCBhbmQgcmV0dXJucyBhIHN1Y2VzcyBvciBmYWlsdXJlIFxuICAgICovXG4gICAgZnVuY3Rpb24gcXVlcnlJbnN0YW5jZXMoY2hhbm5lbElkKSB7XG4gICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIC8vICBSRVRVUk4gQVNZTkMgV09SS1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VzID0gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2luc3RhbmNlcycpLm9yZGVyQnlDaGlsZCgnY2hhbm5lbF9pZCcpLmVxdWFsVG8oY2hhbm5lbElkKTtcblxuICAgICAgICAgICAgaW5zdGFuY2VzLm9uY2UoXCJ2YWx1ZVwiKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNuYXBzaG90LnZhbCgpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqICAgUkVTT0xWRSBJTlNUQU5DRSBBQ0NUU1xuICAgICogICBcbiAgICAqICAgVGhpcyBtZXRob2QgdGFrZXMgdGhlIGluc3RhbmNlIGlkLlxuICAgICogICBcbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVJbnN0YW5jZUFjY3RzKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcXVlcnlJbnN0YW5jZUFjY3RzKGRhdGEpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAgUkVUVVJOIFRIRSBNRVRIT0RcbiAgICByZXR1cm4gZmlyZWJhc2VNb2Q7XG59OyIsIi8qXG4qXHRCQVIgQ0hBUlQgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmRpcmVjdGl2ZSgnYmFyQ2hhcnREaXJlY3RpdmUnLCBiYXJDaGFydERpcmVjdGl2ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYmFyQ2hhcnREaXJlY3RpdmUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2Jhci1jaGFydC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogYmFyQ2hhcnREaXJlY3RpdmVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGJhckNoYXJ0RGlyZWN0aXZlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsIFwiJGZpcmViYXNlT2JqZWN0XCJdO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGJhckNoYXJ0RGlyZWN0aXZlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRmaXJlYmFzZU9iamVjdCkge1xuXHRcdC8vXHRERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmZsYXZvcnMgPSBbXTtcbiAgICAgICAgdm0uYmFsYW5jZSA9IFtdO1xuXG5cdFx0Ly9cdERFRklORSBWSUVXIE1PREVMIFZBUklBQkxFU1xuICAgICAgICBcbiAgICAgICAgLy8gIERFRklORSBQUklWQVRFIEZVTkNUSU9OU1xuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2bS5kYXRhKTtcbiAgICAgICAgICAgIC8vICBJVEVSQVRFIE9WRVIgVkFMVUVTXG4gICAgICAgICAgICAvKk9iamVjdC5rZXlzKCRzY29wZS52bS5kYXRhKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIGlmKCRzY29wZS52bS5kYXRhW2tleV0uY2F0ZWdvcnkgPT0gJ0Nvb2tlZCBHb29kcycpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZmxhdm9ycy5wdXNoKCRzY29wZS52bS5kYXRhW2tleV0ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZtLmJhbGFuY2UucHVzaCgkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UucmVmKCkuY2hpbGQoJ2ludmVudG9yeS9hY2N0cy8nICsga2V5KS5iYWxhbmNlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7Ki9cbiAgICAgICAgfVxuXG4gICAgICAgIC8vICBSVU4gSU5JVFxuICAgICAgICBfaW5pdCgpO1xuXG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufVxuIiwiLypcbipcdEZPT1RFUiBESVJFQ1RJVkVcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIFxuKi9cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuZGlyZWN0aXZlKCdmb290ZXJEaXJlY3RpdmUnLCBmb290ZXJEaXJlY3RpdmUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGZvb3RlckRpcmVjdGl2ZSgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZm9vdGVyLXZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZm9vdGVyRGlyZWN0aXZlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRmb290ZXJEaXJlY3RpdmVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gZm9vdGVyRGlyZWN0aXZlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL1x0REVGSU5FIExPQ0FMIFZBUklBQkxFU1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cblx0XHQvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG5cblxuXHRcdC8vXHRSRVBPUlQgUFJPR1JFU1Ncblx0XHQkbG9nLmluZm8oJ2luIGZvb3RlciBkaXJlY3RpdmUgY29udHJvbGxlcicpO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn1cbiIsIi8qXG4qXHRGT09URVIgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmRpcmVjdGl2ZSgnbGFuZGluZ0NoYW5uZWxzQmFubmVyRGlyZWN0aXZlJywgbGFuZGluZ0NoYW5uZWxzQmFubmVyRGlyZWN0aXZlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nQ2hhbm5lbHNCYW5uZXJEaXJlY3RpdmUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xhbmRpbmdDaGFubmVsc0Jhbm5lci12aWV3LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxhbmRpbmdDaGFubmVsc0Jhbm5lckRpcmVjdGl2ZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0bGFuZGluZ0NoYW5uZWxzQmFubmVyRGlyZWN0aXZlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxhbmRpbmdDaGFubmVsc0Jhbm5lckRpcmVjdGl2ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9cdERFRklORSBMT0NBTCBWQVJJQUJMRVNcblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0Ly9cdERFRklORSBWSUVXIE1PREVMIFZBUklBQkxFU1xuXG5cblx0XHQvL1x0UkVQT1JUIFBST0dSRVNTXG5cdFx0JGxvZy5pbmZvKCdpbiBsYW5kaW5nIGNoYW5uZWxzIGJhbm5lciBkaXJlY3RpdmUgY29udHJvbGxlcicpO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn1cbiIsIi8qXG4qXHRGT09URVIgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmRpcmVjdGl2ZSgnbGFuZGluZ0hlcm9CYW5uZXJEaXJlY3RpdmUnLCBsYW5kaW5nSGVyb0Jhbm5lckRpcmVjdGl2ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFuZGluZ0hlcm9CYW5uZXJEaXJlY3RpdmUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xhbmRpbmdIZXJvQmFubmVyLXZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbGFuZGluZ0hlcm9CYW5uZXJEaXJlY3RpdmVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGxhbmRpbmdIZXJvQmFubmVyRGlyZWN0aXZlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxhbmRpbmdIZXJvQmFubmVyRGlyZWN0aXZlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL1x0REVGSU5FIExPQ0FMIFZBUklBQkxFU1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cblx0XHQvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG5cblxuXHRcdC8vXHRSRVBPUlQgUFJPR1JFU1Ncblx0XHQkbG9nLmluZm8oJ2luIGxhbmRpbmcgaGVybyBiYW5uZXIgZGlyZWN0aXZlIGNvbnRyb2xsZXInKTtcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59XG4iLCIvKlxuKlx0Rk9PVEVSIERJUkVDVElWRVxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gXG4qL1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5kaXJlY3RpdmUoJ2xhbmRpbmdSZXZpZXdzU2xpZGVyRGlyZWN0aXZlJywgbGFuZGluZ1Jldmlld3NTbGlkZXJEaXJlY3RpdmUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdSZXZpZXdzU2xpZGVyRGlyZWN0aXZlKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sYW5kaW5nUmV2aWV3c1NsaWRlci12aWV3LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxhbmRpbmdSZXZpZXdzU2xpZGVyRGlyZWN0aXZlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRsYW5kaW5nUmV2aWV3c1NsaWRlckRpcmVjdGl2ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsYW5kaW5nUmV2aWV3c1NsaWRlckRpcmVjdGl2ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9cdERFRklORSBMT0NBTCBWQVJJQUJMRVNcblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0Ly9cdERFRklORSBWSUVXIE1PREVMIFZBUklBQkxFU1xuXG5cblx0XHQvL1x0UkVQT1JUIFBST0dSRVNTXG5cdFx0JGxvZy5pbmZvKCdpbiBsYW5kaW5nIHJldmlld3Mgc2xpZGVyIGRpcmVjdGl2ZSBjb250cm9sbGVyJyk7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufVxuIiwiLypcbipcdExJTkUgQ0hBUlQgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhd2Vzd2VldCcpXG4gICAgLmRpcmVjdGl2ZSgnbGluZUNoYXJ0RGlyZWN0aXZlJywgbGluZUNoYXJ0RGlyZWN0aXZlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsaW5lQ2hhcnREaXJlY3RpdmUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xpbmUtY2hhcnQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuICAgICAgICAgICAgZGF0YTogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxpbmVDaGFydERpcmVjdGl2ZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0bGluZUNoYXJ0RGlyZWN0aXZlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmVDaGFydERpcmVjdGl2ZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9cdERFRklORSBMT0NBTCBWQVJJQUJMRVNcbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgICRzY29wZS5sYWJlbHMgPSBkYXRhLmZsYXZvcnM7XG4gICAgICAgICRzY29wZS5kYXRhID0gZGF0YS5sZXZlbHM7XG5cblx0XHQvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG5cblxuXHRcdC8vXHRSRVBPUlQgUFJPR1JFU1Ncblx0XHQkbG9nLmluZm8oJ2luIGxpbmVDaGFydERpcmVjdGl2ZSBjb250cm9sbGVyJyk7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufVxuIiwiLypcbipcdENVU1RPTUVSIExJU1RcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIFxuKi9cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2F3ZXN3ZWV0JylcbiAgICAuZGlyZWN0aXZlKCduYXZiYXJEaXJlY3RpdmUnLCBuYXZiYXJEaXJlY3RpdmUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIG5hdmJhckRpcmVjdGl2ZSgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbmF2YmFyLXZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbmF2YmFyRGlyZWN0aXZlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRuYXZiYXJEaXJlY3RpdmVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbmF2YmFyRGlyZWN0aXZlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL1x0REVGSU5FIExPQ0FMIFZBUklBQkxFU1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cblx0XHQvL1x0REVGSU5FIFZJRVcgTU9ERUwgVkFSSUFCTEVTXG5cdFx0dm0uaXNOYXZDb2xsYXBzZWQgPSB0cnVlO1xuXHRcdHZtLmlzQ29sbGFwc2VkID0gZmFsc2U7XG5cdFx0dm0uaXNDb2xsYXBzZWRIb3Jpem9udGFsID0gZmFsc2U7XG5cblx0XHQvL1x0UkVQT1JUIFBST0dSRVNTXG5cdFx0JGxvZy5pbmZvKCdpbiBuYXZiYXIgZGlyZWN0aXZlIGNvbnRyb2xsZXInKTtcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59XG4iLCIvKlxuKlx0Q1VTVE9NRVIgTElTVFxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gXG4qL1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5kaXJlY3RpdmUoJ3RlbXBsYXRlUHJvZHVjdERpcmVjdGl2ZScsIHRlbXBsYXRlUHJvZHVjdERpcmVjdGl2ZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdGVtcGxhdGVQcm9kdWN0RGlyZWN0aXZlKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90ZW1wbGF0ZVByb2R1Y3Qtdmlldy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB0ZW1wbGF0ZVByb2R1Y3REaXJlY3RpdmVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdHRlbXBsYXRlUHJvZHVjdERpcmVjdGl2ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJ2RhdGFTZXJ2aWNlJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gdGVtcGxhdGVQcm9kdWN0RGlyZWN0aXZlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgZGF0YVNlcnZpY2UpIHtcbiAgICAgICAgXG4gICAgICAgIC8vICBERUZJTkUgTE9DQUwgVkFSSUFCTEVTXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZhciBjdXJySW5kZXggPSAwO1xuXG4gICAgICAgIC8vICBERUZJTkUgVklFVyBNT0RFTCBWQVJJQUJMRVNcbiAgICAgICAgLy92bS5wcm9kdWN0SWQgPSAnNzE5NTIwYjAtNDUxMS0xMWU5LWI2MzMtMTE0ZTBkODRmODhiJztcbiAgICAgICAgdm0ucHJvZHVjdE1vZGVsID0gZGF0YVNlcnZpY2UuR0VUcHJvZHVjdERhdGEoJHJvdXRlUGFyYW1zLnByb2R1Y3RJZCk7XG4gICAgICAgIHZtLnNlbGVjdGVkVmFyaWFudCA9IHZtLnByb2R1Y3RNb2RlbC5kZWZhdWx0VmFyaWF0aW9uO1xuICAgICAgICB2bS5zbGlkZXMgPSBbXTtcblx0XHRcblxuICAgICAgICBjb25zb2xlLmxvZygnaW4gdGVtcGxhdGUgcHJvZHVjdCBkaXJlY3RpdmUgY29udHJvbGxlcicsIHZtLnByb2R1Y3RJZCk7XG4gICAgICAgICRsb2cuaW5mbygncHJvZHVjdCBtb2RlbCcsIHZtLnByb2R1Y3RNb2RlbCwgdm0uc2xpZGVzKTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNsaWRlKHVybCkge1xuXHRcdFxuICAgICAgICAgICAgdm0uc2xpZGVzLnB1c2goe1xuICAgICAgICAgICAgICBpbWFnZTogdXJsLFxuICAgICAgICAgICAgICB0ZXh0OiAnanVzdCBhIHRlc3QnLFxuICAgICAgICAgICAgICBpZDogY3VyckluZGV4KytcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAgICAgYWRkU2xpZGUodm0ucHJvZHVjdE1vZGVsLnByb2R1Y3RTaG90QXJyYXlbaV0pO1xuICAgICAgICB9XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRST1VURVMtQ09ORklHXG4qXG4qXHRUaGlzIG1vZHVsZSBzZXRzIHVwIGFsbCB0aGUgcmVxdWlyZWQgYW5ndWxhciByb3V0ZXMgZm9yIHRoaXMgd2ViIGFwcC5cbiovXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYXdlc3dlZXQnKVxuICAgIC5jb25maWcoY29uZmlnKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG5cdCRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJycpO1xuICAgICRyb3V0ZVByb3ZpZGVyXG5cblx0Ly9QVUJMSUMgUk9VVEVTXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZy1wYWdlLmh0bScsICAgICAgICAgICAgICAvLyAgTGFuZGluZyBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ2xhbmRpbmdQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgIC8vICBMYW5kaW5nIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvcHJvZHVjdHMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcHJvZHVjdHMtcGFnZS5odG0nLCAgICAgICAgICAgICAvLyAgUHJvZHVjdCBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ3Byb2R1Y3RQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgIC8vICBQcm9kdWN0IFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvcHJvZHVjdHMvOnByb2R1Y3ROYW1lLzpwcm9kdWN0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcHJvZHVjdHMtcGFnZS5odG0nLCAgICAgICAgICAgICAvLyAgUHJvZHVjdCBQYWdlIFZpZXcgd2l0aCBhIHByb2R1Y3QgSWQgJiB2YXJpZW50IElkXG4gICAgICAgIGNvbnRyb2xsZXI6ICdwcm9kdWN0UGFnZUNvbnRyb2xsZXInLCAgICAgICAgICAgICAgICAvLyAgUHJvZHVjdCBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3Byb2R1Y3RzLzpwcm9kdWN0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcHJvZHVjdHMtcGFnZS5odG0nLCAgICAgICAgICAgICAvLyAgUHJvZHVjdCBQYWdlIFZpZXcgd2l0aCBhIHByb2R1Y3QgSWRcbiAgICAgICAgY29udHJvbGxlcjogJ3Byb2R1Y3RQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgIC8vICBQcm9kdWN0IFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvcHJpY2luZycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wcmljaW5nLXBhZ2UuaHRtJywgICAgICAgICAgICAgIC8vICBQcmljaW5nIFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAncHJpY2luZ1BhZ2VDb250cm9sbGVyJywgICAgICAgICAgICAgICAgLy8gIFByaWNpbmcgUGFnZSBDb250cm9sbGVyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zdG9yeScsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9zdG9yeS1wYWdlLmh0bScsICAgICAgICAgICAgICAgIC8vICBTdG9yeSBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ3N0b3J5UGFnZUNvbnRyb2xsZXInLCAgICAgICAgICAgICAgICAgIC8vICBTdG9yeSBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2NoYW5uZWxzJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NoYW5uZWxzLXBhZ2UuaHRtJywgICAgICAgICAgICAgLy8gIENoYW5uZWxzIFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAnY2hhbm5lbHNQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgLy8gIENoYW5uZWxzIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvY2hhbm5lbHMvOmNoYW5uZWxJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jaGFubmVscy1wYWdlLmh0bScsICAgICAgICAgICAgIC8vICBDaGFubmVscyBQYWdlIFZpZXcgJiBDaGFubmVsIElkXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjaGFubmVsc1BhZ2VDb250cm9sbGVyJywgICAgICAgICAgICAgICAvLyAgQ2hhbm5lbHMgUGFnZSBDb250cm9sbGVyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zdXBwb3J0Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3N1cHBvcnQtcGFnZS5odG0nLCAgICAgICAgICAgICAgLy8gIFN1cHBvcnQgUGFnZSBWaWV3XG4gICAgICAgIGNvbnRyb2xsZXI6ICdzdXBwb3J0UGFnZUNvbnRyb2xsZXInLCAgICAgICAgICAgICAgICAvLyAgU3VwcG9ydCBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3Jldmlld3MnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcmV2aWV3cy1wYWdlLmh0bScsICAgICAgICAgICAgICAvLyAgUmV2aWV3cyBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ3Jldmlld3NQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgIC8vICBSZXZpZXdzIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvam9icycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9qb2JzLXBhZ2UuaHRtJywgICAgICAgICAgICAgICAgIC8vICBKb2JzIFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAnam9ic1BhZ2VDb250cm9sbGVyJywgICAgICAgICAgICAgICAgICAgLy8gIEpvYnMgUGFnZSBDb250cm9sbGVyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9jYXJ0Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NhcnQtcGFnZS5odG0nLCAgICAgICAgICAgICAgICAgLy8gIENhcnQgUGFnZSBWaWV3XG4gICAgICAgIGNvbnRyb2xsZXI6ICdjYXJ0UGFnZUNvbnRyb2xsZXInLCAgICAgICAgICAgICAgICAgICAvLyAgQ2FydCBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2NoZWNrb3V0Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NoZWNrb3V0LXBhZ2UuaHRtJywgICAgICAgICAgICAgLy8gIENoZWNrb3V0IFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAnY2hlY2tvdXRQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgLy8gIENoZWNrb3V0IFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvY2hlY2tvdXQvOnNlc3Npb25JZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jaGVja291dC1wYWdlLmh0bScsICAgICAgICAgICAgIC8vICBDaGVja291dCBQYWdlIFZpZXcgJiBTZXNzaW9uIElkXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjaGVja291dFBhZ2VDb250cm9sbGVyJywgICAgICAgICAgICAgICAvLyAgQ2hlY2tvdXQgUGFnZSBDb250cm9sbGVyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9jaGVja291dC86c2Vzc2lvbklkLzp0aWNrZXRJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jaGVja291dC1wYWdlLmh0bScsICAgICAgICAgICAgIC8vICBDaGVja291dCBQYWdlIFZpZXcgJiBTZXNzaW9uIElkICYgVGlja2V0IElkXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjaGVja291dFBhZ2VDb250cm9sbGVyJywgICAgICAgICAgICAgICAvLyAgQ2hlY2tvdXQgUGFnZSBDb250cm9sbGVyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2dpbi1wYWdlLmh0bScsICAgICAgICAgICAgICAgIC8vICBMb2dpbiBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luUGFnZUNvbnRyb2xsZXInLCAgICAgICAgICAgICAgICAgIC8vICBMb2dpbiBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2Rhc2hib2FyZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kYXNoYm9hcmQtcGFnZS5odG0nLCAgICAgICAgICAgIC8vICBEYXNoYm9hcmQgUGFnZSBWaWV3XG4gICAgICAgIGNvbnRyb2xsZXI6ICdkYXNoYm9hcmRQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAvLyAgRGFzaGJvYXJkIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvYWRtaW4nLCB7fSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIFRPRE86IFRoaXMgc2VjdGlvbiBjYW4gYmUgc3VlZCBmb3IgdmFyaW91cyBhZG1pbiB0YXNrc1xuICAgIC53aGVuKCcvYWRtaW4vZGF0YS9pbnN0YW5jZXNfYnlfY2hhbm5lbCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kYXRhX2luc3RhbmNlc19ieV9jYW5uZWwuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2RhdGFWaWV3c0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvYWRtaW4vZGF0YS9jaGFubmVscycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9kYXRhX2NoYW5uZWxzLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdkYXRhVmlld3NDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2FkbWluL2RhdGEvY2hhbm5lbC86Y2hhbm5lbElkJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RhdGFfY2hhbm5lbF92aWV3Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdkYXRhVmlld3NDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2FkbWluL2RhdGEvaW5zdGFuY2UvOmluc3RhbmNlSWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvaW5zdGFuY2VfZGF0YV92aWV3Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdpbnN0YW5jZURhdGFWaWV3c0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvYWRtaW4vaW52ZW50b3J5L2luc3RhbmNlLzppbnN0YW5jZUlkJywgeyAgICAgICAgLy8gIFRPRE86IGFkZCB0aGlzIHNlY3Rpb24gdG8gdXBkYXRlIGluc3RhbmNlc1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2ludmVudG9yeS1pbnN0YW5jZS1wYWdlLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdpbnZlbnRvcnlJbnN0YW5jZVBhZ2VDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSkgICBcbiAgICAud2hlbignL2FkbWluL2ZvcmVjYXN0cy93ZWVrbHkvOnllYXIvOndlZWsnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2FkbWluLWZvcmVjYXN0LXdlZWstcGFnZS5odG1cIixcbiAgICAgICAgY29udHJvbGxlcjogJ2FkbWluRm9yZWNhc3RDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2FkbWluL2ludmVudG9yeS9vcGVyYXRpb25zJywge30pXG4gICAgLndoZW4oJy9hZG1pbi9pbnZlbnRvcnkvdGVtcGxhdGVzJywge30pXG4gICAgLndoZW4oJy9hZG1pbi9pbnZlbnRvcnkvcmVwb3J0cycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvYWRtaW4taW52LXJwdC1wYWdlLmh0bVwiLFxuICAgICAgICBjb250cm9sbGVyOiAnYWRtaW5JbnZScHRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3RlYW0nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdGVhbS1wYWdlLmh0bScsICAgICAgICAgICAgICAgICAvLyAgVGVhbSBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ3RlYW1QYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgICAgIC8vICBUZWFtIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvdGVhbS86dXNlcklkL2Rhc2hib2FyZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy90ZWFtLWRhc2gtcGFnZS5odG0nLCAgICAgICAgICAgICAgICAgLy8gIFRlYW0gRGFzaGJvYXJkIFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAndGVhbURhc2hQYWdlQ29udHJvbGxlcicsICAgICAgICAgICAgICAgICAgIC8vICBUZWFtIERhc2hib2FyZCBQYWdlIENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3RlYW0vOnVzZXJJZC9DTUVSZWNhcC86aW5zdGFuY2VJZCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jbWUtcmVjYXAtcGFnZS5odG0nLCAgICAgICAgICAgICAgICAgLy8gIFRlYW0gRGFzaGJvYXJkIFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAnQ01FUmVjYXBDb250cm9sbGVyJywgICAgICAgICAgICAgICAgICAgLy8gIFRlYW0gRGFzaGJvYXJkIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICBpbnZlbnRvcnlJbnN0YW5jZUFjY3RzTGlzdDogZnVuY3Rpb24oZmlyZWJhc2VTZXJ2aWNlLCAkcm91dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyZWJhc2VTZXJ2aWNlLnJlc29sdmUuaW5zdGFuY2VBY2N0cygkcm91dGUuY3VycmVudC5wYXJhbXMuaW5zdGFuY2VJZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pIFxuICAgIC53aGVuKCcvdGVhbS9jaGVja2xpc3RzLzp0eXBlLzpsaXN0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdGVhbUNoZWNrbGlzdHMtcGFnZS5odG0nLCAgICAgICAvLyAgVGVhbSBQYWdlIFZpZXdcbiAgICAgICAgY29udHJvbGxlcjogJ3RlYW1DaGVja2xpc3RzUGFnZUNvbnRyb2xsZXInLCAgICAgICAgIC8vICBUZWFtIFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvdGVhbS9zYWxlc1N1bW1hcnknLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdGVhbVNhbGVzU3VtbWFyeS1wYWdlLmh0bScsICAgICAvLyAgVGVhbSBzYWxlcyBzdW1tYXJ5IFBhZ2UgVmlld1xuICAgICAgICBjb250cm9sbGVyOiAndGVhbVNhbGVzU3VtbWFyeVBhZ2VDb250cm9sbGVyJywgICAgICAvLyAgVGVhbSBzYWxlcyBzdW1tYXJ5IFBhZ2UgQ29udHJvbGxlclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KSAgXG5cdC5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuLypcbiogICBSRVFVSVJFRCBGVU5DVElPTlNcbipcbiovXG5cbiJdfQ==
